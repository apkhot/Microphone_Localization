
ADCTimerDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c68  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e04  08003e04  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e0c  08003e0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e0c  08003e0c  00013e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e10  08003e10  00013e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bd04  20000070  08003e84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bd74  08003e84  0002bd74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c40e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4d  00000000  00000000  0002c4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002eed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016df3  00000000  00000000  0002f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2be  00000000  00000000  000467e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ac0  00000000  00000000  00052aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5561  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003564  00000000  00000000  000e55b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08003d8c 	.word	0x08003d8c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08003d8c 	.word	0x08003d8c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	f040 8083 	bne.w	80002d4 <__udivmoddi4+0x118>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4617      	mov	r7, r2
 80001d2:	d947      	bls.n	8000264 <__udivmoddi4+0xa8>
 80001d4:	fab2 f382 	clz	r3, r2
 80001d8:	b14b      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001da:	f1c3 0120 	rsb	r1, r3, #32
 80001de:	fa05 fe03 	lsl.w	lr, r5, r3
 80001e2:	fa20 f101 	lsr.w	r1, r0, r1
 80001e6:	409f      	lsls	r7, r3
 80001e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001f2:	fbbe fcf8 	udiv	ip, lr, r8
 80001f6:	fa1f f987 	uxth.w	r9, r7
 80001fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80001fe:	fb0c f009 	mul.w	r0, ip, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	18ba      	adds	r2, r7, r2
 800020e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000212:	f080 8118 	bcs.w	8000446 <__udivmoddi4+0x28a>
 8000216:	4290      	cmp	r0, r2
 8000218:	f240 8115 	bls.w	8000446 <__udivmoddi4+0x28a>
 800021c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000220:	443a      	add	r2, r7
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f8 	udiv	r0, r2, r8
 8000228:	fb08 2210 	mls	r2, r8, r0, r2
 800022c:	fb00 f109 	mul.w	r1, r0, r9
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a1      	cmp	r1, r4
 8000238:	d909      	bls.n	800024e <__udivmoddi4+0x92>
 800023a:	193c      	adds	r4, r7, r4
 800023c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000240:	f080 8103 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000244:	42a1      	cmp	r1, r4
 8000246:	f240 8100 	bls.w	800044a <__udivmoddi4+0x28e>
 800024a:	3802      	subs	r0, #2
 800024c:	443c      	add	r4, r7
 800024e:	1a64      	subs	r4, r4, r1
 8000250:	2100      	movs	r1, #0
 8000252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa4>
 8000258:	2200      	movs	r2, #0
 800025a:	40dc      	lsrs	r4, r3
 800025c:	e9c6 4200 	strd	r4, r2, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xac>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f382 	clz	r3, r2
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14f      	bne.n	8000310 <__udivmoddi4+0x154>
 8000270:	1a8d      	subs	r5, r1, r2
 8000272:	2101      	movs	r1, #1
 8000274:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000278:	fa1f f882 	uxth.w	r8, r2
 800027c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000280:	fb0e 551c 	mls	r5, lr, ip, r5
 8000284:	fb08 f00c 	mul.w	r0, r8, ip
 8000288:	0c22      	lsrs	r2, r4, #16
 800028a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800028e:	42a8      	cmp	r0, r5
 8000290:	d907      	bls.n	80002a2 <__udivmoddi4+0xe6>
 8000292:	197d      	adds	r5, r7, r5
 8000294:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000298:	d202      	bcs.n	80002a0 <__udivmoddi4+0xe4>
 800029a:	42a8      	cmp	r0, r5
 800029c:	f200 80e9 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 80002a0:	4694      	mov	ip, r2
 80002a2:	1a2d      	subs	r5, r5, r0
 80002a4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b6:	45a0      	cmp	r8, r4
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x10e>
 80002ba:	193c      	adds	r4, r7, r4
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x10c>
 80002c2:	45a0      	cmp	r8, r4
 80002c4:	f200 80d9 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002c8:	4610      	mov	r0, r2
 80002ca:	eba4 0408 	sub.w	r4, r4, r8
 80002ce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d2:	e7c0      	b.n	8000256 <__udivmoddi4+0x9a>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	f000 80b1 	beq.w	8000440 <__udivmoddi4+0x284>
 80002de:	2100      	movs	r1, #0
 80002e0:	e9c6 0500 	strd	r0, r5, [r6]
 80002e4:	4608      	mov	r0, r1
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d14b      	bne.n	800038a <__udivmoddi4+0x1ce>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b9 	bhi.w	800046e <__udivmoddi4+0x2b2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0303 	sbc.w	r3, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0aa      	beq.n	8000260 <__udivmoddi4+0xa4>
 800030a:	e9c6 4e00 	strd	r4, lr, [r6]
 800030e:	e7a7      	b.n	8000260 <__udivmoddi4+0xa4>
 8000310:	409f      	lsls	r7, r3
 8000312:	f1c3 0220 	rsb	r2, r3, #32
 8000316:	40d1      	lsrs	r1, r2
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	fa24 f202 	lsr.w	r2, r4, r2
 800032c:	409d      	lsls	r5, r3
 800032e:	fb00 fc08 	mul.w	ip, r0, r8
 8000332:	432a      	orrs	r2, r5
 8000334:	0c15      	lsrs	r5, r2, #16
 8000336:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800033a:	45ac      	cmp	ip, r5
 800033c:	fa04 f403 	lsl.w	r4, r4, r3
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0x19a>
 8000342:	197d      	adds	r5, r7, r5
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	f080 808f 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800034c:	45ac      	cmp	ip, r5
 800034e:	f240 808c 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000352:	3802      	subs	r0, #2
 8000354:	443d      	add	r5, r7
 8000356:	eba5 050c 	sub.w	r5, r5, ip
 800035a:	fbb5 f1fe 	udiv	r1, r5, lr
 800035e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000362:	fb01 f908 	mul.w	r9, r1, r8
 8000366:	b295      	uxth	r5, r2
 8000368:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036c:	45a9      	cmp	r9, r5
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	197d      	adds	r5, r7, r5
 8000372:	f101 32ff 	add.w	r2, r1, #4294967295
 8000376:	d274      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000378:	45a9      	cmp	r9, r5
 800037a:	d972      	bls.n	8000462 <__udivmoddi4+0x2a6>
 800037c:	3902      	subs	r1, #2
 800037e:	443d      	add	r5, r7
 8000380:	eba5 0509 	sub.w	r5, r5, r9
 8000384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000388:	e778      	b.n	800027c <__udivmoddi4+0xc0>
 800038a:	f1c1 0720 	rsb	r7, r1, #32
 800038e:	408b      	lsls	r3, r1
 8000390:	fa22 fc07 	lsr.w	ip, r2, r7
 8000394:	ea4c 0c03 	orr.w	ip, ip, r3
 8000398:	fa25 f407 	lsr.w	r4, r5, r7
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003a4:	fa1f f88c 	uxth.w	r8, ip
 80003a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ac:	fa20 f307 	lsr.w	r3, r0, r7
 80003b0:	fb09 fa08 	mul.w	sl, r9, r8
 80003b4:	408d      	lsls	r5, r1
 80003b6:	431d      	orrs	r5, r3
 80003b8:	0c2b      	lsrs	r3, r5, #16
 80003ba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003be:	45a2      	cmp	sl, r4
 80003c0:	fa02 f201 	lsl.w	r2, r2, r1
 80003c4:	fa00 f301 	lsl.w	r3, r0, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x222>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d2:	d248      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d946      	bls.n	8000466 <__udivmoddi4+0x2aa>
 80003d8:	f1a9 0902 	sub.w	r9, r9, #2
 80003dc:	4464      	add	r4, ip
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003e6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ea:	fb00 fa08 	mul.w	sl, r0, r8
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x24e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000400:	d22d      	bcs.n	800045e <__udivmoddi4+0x2a2>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d92b      	bls.n	800045e <__udivmoddi4+0x2a2>
 8000406:	3802      	subs	r0, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c6      	mov	lr, r8
 800041a:	464d      	mov	r5, r9
 800041c:	d319      	bcc.n	8000452 <__udivmoddi4+0x296>
 800041e:	d016      	beq.n	800044e <__udivmoddi4+0x292>
 8000420:	b15e      	cbz	r6, 800043a <__udivmoddi4+0x27e>
 8000422:	ebb3 020e 	subs.w	r2, r3, lr
 8000426:	eb64 0405 	sbc.w	r4, r4, r5
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	fa22 f301 	lsr.w	r3, r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	40cc      	lsrs	r4, r1
 8000436:	e9c6 7400 	strd	r7, r4, [r6]
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e70c      	b.n	8000260 <__udivmoddi4+0xa4>
 8000446:	468c      	mov	ip, r1
 8000448:	e6eb      	b.n	8000222 <__udivmoddi4+0x66>
 800044a:	4610      	mov	r0, r2
 800044c:	e6ff      	b.n	800024e <__udivmoddi4+0x92>
 800044e:	4543      	cmp	r3, r8
 8000450:	d2e6      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb69 050c 	sbc.w	r5, r9, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7e0      	b.n	8000420 <__udivmoddi4+0x264>
 800045e:	4628      	mov	r0, r5
 8000460:	e7d3      	b.n	800040a <__udivmoddi4+0x24e>
 8000462:	4611      	mov	r1, r2
 8000464:	e78c      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000466:	4681      	mov	r9, r0
 8000468:	e7b9      	b.n	80003de <__udivmoddi4+0x222>
 800046a:	4608      	mov	r0, r1
 800046c:	e773      	b.n	8000356 <__udivmoddi4+0x19a>
 800046e:	4608      	mov	r0, r1
 8000470:	e749      	b.n	8000306 <__udivmoddi4+0x14a>
 8000472:	f1ac 0c02 	sub.w	ip, ip, #2
 8000476:	443d      	add	r5, r7
 8000478:	e713      	b.n	80002a2 <__udivmoddi4+0xe6>
 800047a:	3802      	subs	r0, #2
 800047c:	443c      	add	r4, r7
 800047e:	e724      	b.n	80002ca <__udivmoddi4+0x10e>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f000 fbc6 	bl	8000c1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f849 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 f983 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000496:	f000 f939 	bl	800070c <MX_USART2_UART_Init>
  MX_DMA_Init();
 800049a:	f000 f961 	bl	8000760 <MX_DMA_Init>
  MX_ADC_Init();
 800049e:	f000 f88f 	bl	80005c0 <MX_ADC_Init>
  MX_TIM2_Init();
 80004a2:	f000 f8e7 	bl	8000674 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80004a6:	4817      	ldr	r0, [pc, #92]	; (8000504 <main+0x80>)
 80004a8:	f002 fb84 	bl	8002bb4 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc, (uint32_t *)DMABuff,DMALEN);
 80004ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80004b0:	4915      	ldr	r1, [pc, #84]	; (8000508 <main+0x84>)
 80004b2:	4816      	ldr	r0, [pc, #88]	; (800050c <main+0x88>)
 80004b4:	f000 fd66 	bl	8000f84 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(currPos == TOTCAP){
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <main+0x8c>)
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	f245 52f0 	movw	r2, #22000	; 0x55f0
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d1f9      	bne.n	80004b8 <main+0x34>
		  for(int i = 0; i<DMALEN; i++){
 80004c4:	2300      	movs	r3, #0
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	e016      	b.n	80004f8 <main+0x74>
			  sprintf(msg,"%u\r\n",dataCap[i]);
 80004ca:	4a12      	ldr	r2, [pc, #72]	; (8000514 <main+0x90>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004d2:	461a      	mov	r2, r3
 80004d4:	4910      	ldr	r1, [pc, #64]	; (8000518 <main+0x94>)
 80004d6:	4811      	ldr	r0, [pc, #68]	; (800051c <main+0x98>)
 80004d8:	f003 f81e 	bl	8003518 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80004dc:	480f      	ldr	r0, [pc, #60]	; (800051c <main+0x98>)
 80004de:	f7ff fe4d 	bl	800017c <strlen>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	490c      	ldr	r1, [pc, #48]	; (800051c <main+0x98>)
 80004ec:	480c      	ldr	r0, [pc, #48]	; (8000520 <main+0x9c>)
 80004ee:	f002 fe20 	bl	8003132 <HAL_UART_Transmit>
		  for(int i = 0; i<DMALEN; i++){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80004fe:	dbe4      	blt.n	80004ca <main+0x46>
	  if(currPos == TOTCAP){
 8000500:	e7da      	b.n	80004b8 <main+0x34>
 8000502:	bf00      	nop
 8000504:	2000bc44 	.word	0x2000bc44
 8000508:	2000009c 	.word	0x2000009c
 800050c:	2000bd0c 	.word	0x2000bd0c
 8000510:	2000008c 	.word	0x2000008c
 8000514:	20001064 	.word	0x20001064
 8000518:	08003da4 	.word	0x08003da4
 800051c:	2000103c 	.word	0x2000103c
 8000520:	2000bc84 	.word	0x2000bc84

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b092      	sub	sp, #72	; 0x48
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2234      	movs	r2, #52	; 0x34
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f002 ffe8 	bl	8003508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000546:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <SystemClock_Config+0x98>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800054e:	4a1b      	ldr	r2, [pc, #108]	; (80005bc <SystemClock_Config+0x98>)
 8000550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000554:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2310      	movs	r3, #16
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000566:	2300      	movs	r3, #0
 8000568:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800056a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000570:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fd16 	bl	8001fac <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000586:	f000 f9b4 	bl	80008f2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2303      	movs	r3, #3
 8000590:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 f832 	bl	800260c <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ae:	f000 f9a0 	bl	80008f2 <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3748      	adds	r7, #72	; 0x48
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <MX_ADC_Init+0xac>)
 80005d2:	4a27      	ldr	r2, [pc, #156]	; (8000670 <MX_ADC_Init+0xb0>)
 80005d4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <MX_ADC_Init+0xac>)
 80005d8:	2200      	movs	r2, #0
 80005da:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <MX_ADC_Init+0xac>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <MX_ADC_Init+0xac>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <MX_ADC_Init+0xac>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005ee:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_ADC_Init+0xac>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MX_ADC_Init+0xac>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <MX_ADC_Init+0xac>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_ADC_Init+0xac>)
 8000602:	2200      	movs	r2, #0
 8000604:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_ADC_Init+0xac>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_ADC_Init+0xac>)
 8000610:	2201      	movs	r2, #1
 8000612:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_ADC_Init+0xac>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_ADC_Init+0xac>)
 800061e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_ADC_Init+0xac>)
 8000626:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800062a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_ADC_Init+0xac>)
 800062e:	2200      	movs	r2, #0
 8000630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <MX_ADC_Init+0xac>)
 8000636:	f000 fb5f 	bl	8000cf8 <HAL_ADC_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000640:	f000 f957 	bl	80008f2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000648:	2301      	movs	r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_ADC_Init+0xac>)
 8000656:	f000 fd7d 	bl	8001154 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000660:	f000 f947 	bl	80008f2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000bd0c 	.word	0x2000bd0c
 8000670:	40012400 	.word	0x40012400

08000674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_TIM2_Init+0x94>)
 8000692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_TIM2_Init+0x94>)
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_TIM2_Init+0x94>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16-1;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_TIM2_Init+0x94>)
 80006a6:	220f      	movs	r2, #15
 80006a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_TIM2_Init+0x94>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_TIM2_Init+0x94>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b6:	4814      	ldr	r0, [pc, #80]	; (8000708 <MX_TIM2_Init+0x94>)
 80006b8:	f002 fa3c 	bl	8002b34 <HAL_TIM_Base_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80006c2:	f000 f916 	bl	80008f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	4619      	mov	r1, r3
 80006d2:	480d      	ldr	r0, [pc, #52]	; (8000708 <MX_TIM2_Init+0x94>)
 80006d4:	f002 fab8 	bl	8002c48 <HAL_TIM_ConfigClockSource>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80006de:	f000 f908 	bl	80008f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006e2:	2320      	movs	r3, #32
 80006e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ea:	463b      	mov	r3, r7
 80006ec:	4619      	mov	r1, r3
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <MX_TIM2_Init+0x94>)
 80006f0:	f002 fc74 	bl	8002fdc <HAL_TIMEx_MasterConfigSynchronization>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80006fa:	f000 f8fa 	bl	80008f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000bc44 	.word	0x2000bc44

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART2_UART_Init+0x48>)
 8000712:	4a11      	ldr	r2, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_USART2_UART_Init+0x48>)
 8000718:	4a10      	ldr	r2, [pc, #64]	; (800075c <MX_USART2_UART_Init+0x50>)
 800071a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_USART2_UART_Init+0x48>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x48>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_USART2_UART_Init+0x48>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x48>)
 8000730:	220c      	movs	r2, #12
 8000732:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_USART2_UART_Init+0x48>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x48>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_USART2_UART_Init+0x48>)
 8000742:	f002 fca9 	bl	8003098 <HAL_UART_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800074c:	f000 f8d1 	bl	80008f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000bc84 	.word	0x2000bc84
 8000758:	40004400 	.word	0x40004400
 800075c:	0007a120 	.word	0x0007a120

08000760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_DMA_Init+0x38>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <MX_DMA_Init+0x38>)
 800076c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_DMA_Init+0x38>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	200b      	movs	r0, #11
 8000784:	f001 f843 	bl	800180e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000788:	200b      	movs	r0, #11
 800078a:	f001 f85c 	bl	8001846 <HAL_NVIC_EnableIRQ>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <MX_GPIO_Init+0xc0>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a29      	ldr	r2, [pc, #164]	; (800085c <MX_GPIO_Init+0xc0>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	4b27      	ldr	r3, [pc, #156]	; (800085c <MX_GPIO_Init+0xc0>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <MX_GPIO_Init+0xc0>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a23      	ldr	r2, [pc, #140]	; (800085c <MX_GPIO_Init+0xc0>)
 80007d0:	f043 0320 	orr.w	r3, r3, #32
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <MX_GPIO_Init+0xc0>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 0320 	and.w	r3, r3, #32
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_GPIO_Init+0xc0>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a1d      	ldr	r2, [pc, #116]	; (800085c <MX_GPIO_Init+0xc0>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_GPIO_Init+0xc0>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_GPIO_Init+0xc0>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <MX_GPIO_Init+0xc0>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_GPIO_Init+0xc0>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	4812      	ldr	r0, [pc, #72]	; (8000860 <MX_GPIO_Init+0xc4>)
 8000818:	f001 fbb0 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000822:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_GPIO_Init+0xc8>)
 8000834:	f001 fa12 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000838:	2320      	movs	r3, #32
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_GPIO_Init+0xc4>)
 8000850:	f001 fa04 	bl	8001c5c <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020800 	.word	0x40020800

08000868 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<DMALEN; i++){
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	e00e      	b.n	8000894 <HAL_ADC_ConvCpltCallback+0x2c>
		dataCap[currPos + i] = DMABuff[i];
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	4413      	add	r3, r2
 8000880:	4915      	ldr	r1, [pc, #84]	; (80008d8 <HAL_ADC_ConvCpltCallback+0x70>)
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000888:	4a14      	ldr	r2, [pc, #80]	; (80008dc <HAL_ADC_ConvCpltCallback+0x74>)
 800088a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i<DMALEN; i++){
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3301      	adds	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800089a:	dbec      	blt.n	8000876 <HAL_ADC_ConvCpltCallback+0xe>
	}
	currPos += DMALEN;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_ADC_ConvCpltCallback+0x6c>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_ADC_ConvCpltCallback+0x6c>)
 80008a8:	801a      	strh	r2, [r3, #0]

	if(currPos == TOTCAP){
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_ADC_ConvCpltCallback+0x6c>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	f245 52f0 	movw	r2, #22000	; 0x55f0
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d103      	bne.n	80008be <HAL_ADC_ConvCpltCallback+0x56>
		HAL_ADC_Stop_DMA(&hadc);
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fbf1 	bl	80010a0 <HAL_ADC_Stop_DMA>
	}

	  HAL_ADC_Start_DMA(&hadc, (uint32_t *)DMABuff,DMALEN);
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008c4:	4904      	ldr	r1, [pc, #16]	; (80008d8 <HAL_ADC_ConvCpltCallback+0x70>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fb5c 	bl	8000f84 <HAL_ADC_Start_DMA>
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	2000009c 	.word	0x2000009c
 80008dc:	20001064 	.word	0x20001064

080008e0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f6:	b672      	cpsid	i
}
 80008f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fa:	e7fe      	b.n	80008fa <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_MspInit+0x5c>)
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	4a14      	ldr	r2, [pc, #80]	; (8000958 <HAL_MspInit+0x5c>)
 8000908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090c:	6253      	str	r3, [r2, #36]	; 0x24
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_MspInit+0x5c>)
 8000910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x5c>)
 800091c:	6a1b      	ldr	r3, [r3, #32]
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_MspInit+0x5c>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6213      	str	r3, [r2, #32]
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_MspInit+0x5c>)
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x5c>)
 8000934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x5c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6253      	str	r3, [r2, #36]	; 0x24
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x5c>)
 8000940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800094a:	2007      	movs	r0, #7
 800094c:	f000 ff54 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a29      	ldr	r2, [pc, #164]	; (8000a20 <HAL_ADC_MspInit+0xc4>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d14b      	bne.n	8000a16 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <HAL_ADC_MspInit+0xc8>)
 8000980:	6a1b      	ldr	r3, [r3, #32]
 8000982:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <HAL_ADC_MspInit+0xc8>)
 8000984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000988:	6213      	str	r3, [r2, #32]
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <HAL_ADC_MspInit+0xc8>)
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <HAL_ADC_MspInit+0xc8>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <HAL_ADC_MspInit+0xc8>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <HAL_ADC_MspInit+0xc8>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ae:	2301      	movs	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b2:	2303      	movs	r3, #3
 80009b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4819      	ldr	r0, [pc, #100]	; (8000a28 <HAL_ADC_MspInit+0xcc>)
 80009c2:	f001 f94b 	bl	8001c5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_ADC_MspInit+0xd0>)
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_ADC_MspInit+0xd4>)
 80009ca:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <HAL_ADC_MspInit+0xd0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <HAL_ADC_MspInit+0xd0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_ADC_MspInit+0xd0>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_ADC_MspInit+0xd0>)
 80009e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_ADC_MspInit+0xd0>)
 80009e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ec:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_ADC_MspInit+0xd0>)
 80009f0:	2220      	movs	r2, #32
 80009f2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_ADC_MspInit+0xd0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <HAL_ADC_MspInit+0xd0>)
 80009fc:	f000 ff3e 	bl	800187c <HAL_DMA_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8000a06:	f7ff ff74 	bl	80008f2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_ADC_MspInit+0xd0>)
 8000a0e:	645a      	str	r2, [r3, #68]	; 0x44
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_ADC_MspInit+0xd0>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40012400 	.word	0x40012400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	2000bcc8 	.word	0x2000bcc8
 8000a30:	40026008 	.word	0x40026008

08000a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a44:	d10b      	bne.n	8000a5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_TIM_Base_MspInit+0x34>)
 8000a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_TIM_Base_MspInit+0x34>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6253      	str	r3, [r2, #36]	; 0x24
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_TIM_Base_MspInit+0x34>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <HAL_UART_MspInit+0x7c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d127      	bne.n	8000ade <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_UART_MspInit+0x80>)
 8000a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a92:	4a16      	ldr	r2, [pc, #88]	; (8000aec <HAL_UART_MspInit+0x80>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	6253      	str	r3, [r2, #36]	; 0x24
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_UART_MspInit+0x80>)
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_UART_MspInit+0x80>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	4a10      	ldr	r2, [pc, #64]	; (8000aec <HAL_UART_MspInit+0x80>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	61d3      	str	r3, [r2, #28]
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_UART_MspInit+0x80>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <HAL_UART_MspInit+0x84>)
 8000ada:	f001 f8bf 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	; 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40004400 	.word	0x40004400
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3a:	f000 f8c1 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <DMA1_Channel1_IRQHandler+0x10>)
 8000b4a:	f000 ffa8 	bl	8001a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000bcc8 	.word	0x2000bcc8

08000b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <_sbrk+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <_sbrk+0x60>)
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <_sbrk+0x64>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <_sbrk+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d207      	bcs.n	8000b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b88:	f002 fc94 	bl	80034b4 <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20014000 	.word	0x20014000
 8000bb8:	00000400 	.word	0x00000400
 8000bbc:	20000090 	.word	0x20000090
 8000bc0:	2000bd78 	.word	0x2000bd78

08000bc4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bf6:	f7ff ffe5 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f002 fc61 	bl	80034c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfe:	f7ff fc41 	bl	8000484 <main>
  bx lr
 8000c02:	4770      	bx	lr
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c0c:	08003e14 	.word	0x08003e14
  ldr r2, =_sbss
 8000c10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c14:	2000bd74 	.word	0x2000bd74

08000c18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_IRQHandler>

08000c1a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 fde7 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f80e 	bl	8000c4c <HAL_InitTick>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d002      	beq.n	8000c3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	e001      	b.n	8000c40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3c:	f7ff fe5e 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_InitTick+0x68>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d022      	beq.n	8000ca6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_InitTick+0x6c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_InitTick+0x68>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fdf4 	bl	8001862 <HAL_SYSTICK_Config>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10f      	bne.n	8000ca0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b0f      	cmp	r3, #15
 8000c84:	d809      	bhi.n	8000c9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c86:	2200      	movs	r2, #0
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8e:	f000 fdbe 	bl	800180e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_InitTick+0x70>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	e007      	b.n	8000caa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e004      	b.n	8000caa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e001      	b.n	8000caa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x1c>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <HAL_IncTick+0x1c>)
 8000cd0:	6013      	str	r3, [r2, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000bd60 	.word	0x2000bd60
 8000ce0:	20000008 	.word	0x20000008

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <HAL_GetTick+0x10>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	2000bd60 	.word	0x2000bd60

08000cf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e127      	b.n	8000f68 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d115      	bne.n	8000d52 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d34:	4b8e      	ldr	r3, [pc, #568]	; (8000f70 <HAL_ADC_Init+0x278>)
 8000d36:	6a1b      	ldr	r3, [r3, #32]
 8000d38:	4a8d      	ldr	r2, [pc, #564]	; (8000f70 <HAL_ADC_Init+0x278>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6213      	str	r3, [r2, #32]
 8000d40:	4b8b      	ldr	r3, [pc, #556]	; (8000f70 <HAL_ADC_Init+0x278>)
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff fe05 	bl	800095c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f040 80ff 	bne.w	8000f5e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d68:	f023 0302 	bic.w	r3, r3, #2
 8000d6c:	f043 0202 	orr.w	r2, r3, #2
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000d74:	4b7f      	ldr	r3, [pc, #508]	; (8000f74 <HAL_ADC_Init+0x27c>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	497c      	ldr	r1, [pc, #496]	; (8000f74 <HAL_ADC_Init+0x27c>)
 8000d82:	4313      	orrs	r3, r2
 8000d84:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000d8e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d96:	4619      	mov	r1, r3
 8000d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000db2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000db8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc8:	fa93 f3a3 	rbit	r3, r3
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	fab3 f383 	clz	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000dda:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dde:	4313      	orrs	r3, r2
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de6:	2b10      	cmp	r3, #16
 8000de8:	d007      	beq.n	8000dfa <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000df2:	4313      	orrs	r3, r2
 8000df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000df6:	4313      	orrs	r3, r2
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e04:	2b40      	cmp	r3, #64	; 0x40
 8000e06:	d04f      	beq.n	8000ea8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e1a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6912      	ldr	r2, [r2, #16]
 8000e20:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000e24:	d003      	beq.n	8000e2e <HAL_ADC_Init+0x136>
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	6912      	ldr	r2, [r2, #16]
 8000e2a:	2a01      	cmp	r2, #1
 8000e2c:	d102      	bne.n	8000e34 <HAL_ADC_Init+0x13c>
 8000e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e32:	e000      	b.n	8000e36 <HAL_ADC_Init+0x13e>
 8000e34:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000e36:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d125      	bne.n	8000e94 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d114      	bne.n	8000e7c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000e5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	fa92 f2a2 	rbit	r2, r2
 8000e64:	617a      	str	r2, [r7, #20]
  return result;
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	fab2 f282 	clz	r2, r2
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	4093      	lsls	r3, r2
 8000e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e76:	4313      	orrs	r3, r2
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
 8000e7a:	e00b      	b.n	8000e94 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	f043 0220 	orr.w	r2, r3, #32
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8c:	f043 0201 	orr.w	r2, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <HAL_ADC_Init+0x280>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <HAL_ADC_Init+0x284>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6812      	ldr	r2, [r2, #0]
 8000eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ec4:	d003      	beq.n	8000ece <HAL_ADC_Init+0x1d6>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d119      	bne.n	8000f02 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000edc:	3b01      	subs	r3, #1
 8000ede:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000ee2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	fa92 f2a2 	rbit	r2, r2
 8000eea:	60fa      	str	r2, [r7, #12]
  return result;
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	fab2 f282 	clz	r2, r2
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	fa03 f202 	lsl.w	r2, r3, r2
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	631a      	str	r2, [r3, #48]	; 0x30
 8000f00:	e007      	b.n	8000f12 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000f10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_ADC_Init+0x288>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d10b      	bne.n	8000f3a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	f023 0303 	bic.w	r3, r3, #3
 8000f30:	f043 0201 	orr.w	r2, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f38:	e014      	b.n	8000f64 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f023 0312 	bic.w	r3, r3, #18
 8000f42:	f043 0210 	orr.w	r2, r3, #16
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f4e:	f043 0201 	orr.w	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f5c:	e002      	b.n	8000f64 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3738      	adds	r7, #56	; 0x38
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40012700 	.word	0x40012700
 8000f78:	fcfc16ff 	.word	0xfcfc16ff
 8000f7c:	c0fff189 	.word	0xc0fff189
 8000f80:	bf80fffe 	.word	0xbf80fffe

08000f84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_Start_DMA+0x1e>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e074      	b.n	800108c <HAL_ADC_Start_DMA+0x108>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f000 fa3e 	bl	800142c <ADC_Enable>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d167      	bne.n	800108a <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fc2:	f023 0301 	bic.w	r3, r3, #1
 8000fc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d007      	beq.n	8000fec <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fe4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ff8:	d106      	bne.n	8001008 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ffe:	f023 0206 	bic.w	r2, r3, #6
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	651a      	str	r2, [r3, #80]	; 0x50
 8001006:	e002      	b.n	800100e <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2200      	movs	r2, #0
 800100c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a1e      	ldr	r2, [pc, #120]	; (8001094 <HAL_ADC_Start_DMA+0x110>)
 800101c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_ADC_Start_DMA+0x114>)
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <HAL_ADC_Start_DMA+0x118>)
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001036:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001046:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001056:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3358      	adds	r3, #88	; 0x58
 8001062:	4619      	mov	r1, r3
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f000 fc7c 	bl	8001964 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d107      	bne.n	800108a <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001088:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800108a:	7dfb      	ldrb	r3, [r7, #23]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08001567 	.word	0x08001567
 8001098:	0800160f 	.word	0x0800160f
 800109c:	0800162b 	.word	0x0800162b

080010a0 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_ADC_Stop_DMA+0x1a>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e03f      	b.n	800113a <HAL_ADC_Stop_DMA+0x9a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fa0e 	bl	80014e4 <ADC_ConversionStop_Disable>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d12e      	bne.n	8001130 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010e0:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d10d      	bne.n	800110c <HAL_ADC_Stop_DMA+0x6c>
    {
      HAL_DMA_Abort(hadc->DMA_Handle);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fc95 	bl	8001a24 <HAL_DMA_Abort>
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	f043 0201 	orr.w	r2, r3, #1
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800112e:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <HAL_ADC_ConfigChannel+0x20>
 8001170:	2302      	movs	r3, #2
 8001172:	e14f      	b.n	8001414 <HAL_ADC_ConfigChannel+0x2c0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b06      	cmp	r3, #6
 8001182:	d81c      	bhi.n	80011be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	3b05      	subs	r3, #5
 8001196:	221f      	movs	r2, #31
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	4019      	ands	r1, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	3b05      	subs	r3, #5
 80011b0:	fa00 f203 	lsl.w	r2, r0, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
 80011bc:	e07e      	b.n	80012bc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b0c      	cmp	r3, #12
 80011c4:	d81c      	bhi.n	8001200 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	3b23      	subs	r3, #35	; 0x23
 80011d8:	221f      	movs	r2, #31
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	4019      	ands	r1, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3b23      	subs	r3, #35	; 0x23
 80011f2:	fa00 f203 	lsl.w	r2, r0, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80011fe:	e05d      	b.n	80012bc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b12      	cmp	r3, #18
 8001206:	d81c      	bhi.n	8001242 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	3b41      	subs	r3, #65	; 0x41
 800121a:	221f      	movs	r2, #31
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	4019      	ands	r1, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	3b41      	subs	r3, #65	; 0x41
 8001234:	fa00 f203 	lsl.w	r2, r0, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	639a      	str	r2, [r3, #56]	; 0x38
 8001240:	e03c      	b.n	80012bc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b18      	cmp	r3, #24
 8001248:	d81c      	bhi.n	8001284 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	3b5f      	subs	r3, #95	; 0x5f
 800125c:	221f      	movs	r2, #31
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	4019      	ands	r1, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	3b5f      	subs	r3, #95	; 0x5f
 8001276:	fa00 f203 	lsl.w	r2, r0, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	635a      	str	r2, [r3, #52]	; 0x34
 8001282:	e01b      	b.n	80012bc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	3b7d      	subs	r3, #125	; 0x7d
 8001296:	221f      	movs	r2, #31
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	4019      	ands	r1, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	3b7d      	subs	r3, #125	; 0x7d
 80012b0:	fa00 f203 	lsl.w	r2, r0, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b09      	cmp	r3, #9
 80012c2:	d81a      	bhi.n	80012fa <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6959      	ldr	r1, [r3, #20]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	2207      	movs	r2, #7
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	4019      	ands	r1, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	6898      	ldr	r0, [r3, #8]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	fa00 f203 	lsl.w	r2, r0, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	e05d      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b13      	cmp	r3, #19
 8001300:	d81c      	bhi.n	800133c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6919      	ldr	r1, [r3, #16]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	3b1e      	subs	r3, #30
 8001314:	2207      	movs	r2, #7
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	4019      	ands	r1, r3
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	6898      	ldr	r0, [r3, #8]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	3b1e      	subs	r3, #30
 800132e:	fa00 f203 	lsl.w	r2, r0, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	611a      	str	r2, [r3, #16]
 800133a:	e03c      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b1d      	cmp	r3, #29
 8001342:	d81c      	bhi.n	800137e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68d9      	ldr	r1, [r3, #12]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	3b3c      	subs	r3, #60	; 0x3c
 8001356:	2207      	movs	r2, #7
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	4019      	ands	r1, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	6898      	ldr	r0, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	3b3c      	subs	r3, #60	; 0x3c
 8001370:	fa00 f203 	lsl.w	r2, r0, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	e01b      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4613      	mov	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	3b5a      	subs	r3, #90	; 0x5a
 8001390:	2207      	movs	r2, #7
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	4019      	ands	r1, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	6898      	ldr	r0, [r3, #8]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	3b5a      	subs	r3, #90	; 0x5a
 80013aa:	fa00 f203 	lsl.w	r2, r0, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b10      	cmp	r3, #16
 80013bc:	d003      	beq.n	80013c6 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013c2:	2b11      	cmp	r3, #17
 80013c4:	d121      	bne.n	800140a <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <HAL_ADC_ConfigChannel+0x2cc>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d11b      	bne.n	800140a <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_ADC_ConfigChannel+0x2cc>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <HAL_ADC_ConfigChannel+0x2cc>)
 80013d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013dc:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d111      	bne.n	800140a <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_ADC_ConfigChannel+0x2d0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_ADC_ConfigChannel+0x2d4>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	0c9a      	lsrs	r2, r3, #18
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80013fc:	e002      	b.n	8001404 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3b01      	subs	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40012700 	.word	0x40012700
 8001424:	20000000 	.word	0x20000000
 8001428:	431bde83 	.word	0x431bde83

0800142c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001446:	2b40      	cmp	r3, #64	; 0x40
 8001448:	d043      	beq.n	80014d2 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f042 0201 	orr.w	r2, r2, #1
 8001458:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <ADC_Enable+0xb0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a20      	ldr	r2, [pc, #128]	; (80014e0 <ADC_Enable+0xb4>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	0c9a      	lsrs	r2, r3, #18
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800146e:	e002      	b.n	8001476 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	3b01      	subs	r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f9      	bne.n	8001470 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800147c:	f7ff fc32 	bl	8000ce4 <HAL_GetTick>
 8001480:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001482:	e01f      	b.n	80014c4 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001484:	f7ff fc2e 	bl	8000ce4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d918      	bls.n	80014c4 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149c:	2b40      	cmp	r3, #64	; 0x40
 800149e:	d011      	beq.n	80014c4 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	f043 0210 	orr.w	r2, r3, #16
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e007      	b.n	80014d4 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ce:	2b40      	cmp	r3, #64	; 0x40
 80014d0:	d1d8      	bne.n	8001484 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000000 	.word	0x20000000
 80014e0:	431bde83 	.word	0x431bde83

080014e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	2b40      	cmp	r3, #64	; 0x40
 80014fc:	d12e      	bne.n	800155c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800150e:	f7ff fbe9 	bl	8000ce4 <HAL_GetTick>
 8001512:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001514:	e01b      	b.n	800154e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8001516:	f7ff fbe5 	bl	8000ce4 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d914      	bls.n	800154e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152e:	2b40      	cmp	r3, #64	; 0x40
 8001530:	d10d      	bne.n	800154e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f043 0210 	orr.w	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e007      	b.n	800155e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001558:	2b40      	cmp	r3, #64	; 0x40
 800155a:	d0dc      	beq.n	8001516 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800157c:	2b00      	cmp	r3, #0
 800157e:	d13d      	bne.n	80015fc <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d12c      	bne.n	80015f4 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d127      	bne.n	80015f4 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d119      	bne.n	80015f4 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0220 	bic.w	r2, r2, #32
 80015ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d105      	bne.n	80015f4 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	f043 0201 	orr.w	r2, r3, #1
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f7ff f937 	bl	8000868 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80015fa:	e004      	b.n	8001606 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	4798      	blx	r3
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff f95f 	bl	80008e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001648:	f043 0204 	orr.w	r2, r3, #4
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff fd76 	bl	8001142 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001692:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	60d3      	str	r3, [r2, #12]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db0b      	blt.n	80016ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 021f 	and.w	r2, r3, #31
 80016dc:	4906      	ldr	r1, [pc, #24]	; (80016f8 <__NVIC_EnableIRQ+0x34>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2001      	movs	r0, #1
 80016e6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	; (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
         );
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c4:	d301      	bcc.n	80017ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00f      	b.n	80017ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <SysTick_Config+0x40>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d2:	210f      	movs	r1, #15
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f7ff ff90 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <SysTick_Config+0x40>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <SysTick_Config+0x40>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff2d 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001820:	f7ff ff42 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 8001824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ff90 	bl	8001750 <NVIC_EncodePriority>
 8001830:	4602      	mov	r2, r0
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff5f 	bl	80016fc <__NVIC_SetPriority>
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff35 	bl	80016c4 <__NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffa2 	bl	80017b4 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e059      	b.n	8001942 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_DMA_Init+0xd0>)
 8001896:	429a      	cmp	r2, r3
 8001898:	d80f      	bhi.n	80018ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_DMA_Init+0xd4>)
 80018a2:	4413      	add	r3, r2
 80018a4:	4a2b      	ldr	r2, [pc, #172]	; (8001954 <HAL_DMA_Init+0xd8>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	009a      	lsls	r2, r3, #2
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a28      	ldr	r2, [pc, #160]	; (8001958 <HAL_DMA_Init+0xdc>)
 80018b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80018b8:	e00e      	b.n	80018d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_DMA_Init+0xe0>)
 80018c2:	4413      	add	r3, r2
 80018c4:	4a23      	ldr	r2, [pc, #140]	; (8001954 <HAL_DMA_Init+0xd8>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	009a      	lsls	r2, r3, #2
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a22      	ldr	r2, [pc, #136]	; (8001960 <HAL_DMA_Init+0xe4>)
 80018d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40026407 	.word	0x40026407
 8001950:	bffd9ff8 	.word	0xbffd9ff8
 8001954:	cccccccd 	.word	0xcccccccd
 8001958:	40026000 	.word	0x40026000
 800195c:	bffd9bf8 	.word	0xbffd9bf8
 8001960:	40026400 	.word	0x40026400

08001964 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_DMA_Start_IT+0x20>
 8001980:	2302      	movs	r3, #2
 8001982:	e04b      	b.n	8001a1c <HAL_DMA_Start_IT+0xb8>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d13a      	bne.n	8001a0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	68b9      	ldr	r1, [r7, #8]
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 f91d 	bl	8001bfc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 020e 	orr.w	r2, r2, #14
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e00f      	b.n	80019fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0204 	bic.w	r2, r2, #4
 80019ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 020a 	orr.w	r2, r2, #10
 80019fa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e005      	b.n	8001a1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
 8001a18:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d008      	beq.n	8001a4e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e022      	b.n	8001a94 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 020e 	bic.w	r2, r2, #14
 8001a5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 021c 	and.w	r2, r3, #28
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a80:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 031c 	and.w	r3, r3, #28
 8001abe:	2204      	movs	r2, #4
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d026      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x7a>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d021      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d107      	bne.n	8001af2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0204 	bic.w	r2, r2, #4
 8001af0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 021c 	and.w	r2, r3, #28
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	2104      	movs	r1, #4
 8001b00:	fa01 f202 	lsl.w	r2, r1, r2
 8001b04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d071      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b16:	e06c      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f003 031c 	and.w	r3, r3, #28
 8001b20:	2202      	movs	r2, #2
 8001b22:	409a      	lsls	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d02e      	beq.n	8001b8a <HAL_DMA_IRQHandler+0xec>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d029      	beq.n	8001b8a <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10b      	bne.n	8001b5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 020a 	bic.w	r2, r2, #10
 8001b52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 021c 	and.w	r2, r3, #28
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b68:	2102      	movs	r1, #2
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d038      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b88:	e033      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 031c 	and.w	r3, r3, #28
 8001b92:	2208      	movs	r2, #8
 8001b94:	409a      	lsls	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d02a      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x156>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d025      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 020e 	bic.w	r2, r2, #14
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 021c 	and.w	r2, r3, #28
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d004      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bf2:	bf00      	nop
 8001bf4:	bf00      	nop
}
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 021c 	and.w	r2, r3, #28
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d108      	bne.n	8001c40 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c3e:	e007      	b.n	8001c50 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	60da      	str	r2, [r3, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
	...

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c72:	e160      	b.n	8001f36 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2101      	movs	r1, #1
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8152 	beq.w	8001f30 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d005      	beq.n	8001ca4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d130      	bne.n	8001d06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001cda:	2201      	movs	r2, #1
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	f003 0201 	and.w	r2, r3, #1
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d017      	beq.n	8001d42 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d123      	bne.n	8001d96 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	220f      	movs	r2, #15
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	6939      	ldr	r1, [r7, #16]
 8001d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0203 	and.w	r2, r3, #3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80ac 	beq.w	8001f30 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd8:	4b5e      	ldr	r3, [pc, #376]	; (8001f54 <HAL_GPIO_Init+0x2f8>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a5d      	ldr	r2, [pc, #372]	; (8001f54 <HAL_GPIO_Init+0x2f8>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	4b5b      	ldr	r3, [pc, #364]	; (8001f54 <HAL_GPIO_Init+0x2f8>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001df0:	4a59      	ldr	r2, [pc, #356]	; (8001f58 <HAL_GPIO_Init+0x2fc>)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	220f      	movs	r2, #15
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a51      	ldr	r2, [pc, #324]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d025      	beq.n	8001e68 <HAL_GPIO_Init+0x20c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a50      	ldr	r2, [pc, #320]	; (8001f60 <HAL_GPIO_Init+0x304>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d01f      	beq.n	8001e64 <HAL_GPIO_Init+0x208>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4f      	ldr	r2, [pc, #316]	; (8001f64 <HAL_GPIO_Init+0x308>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d019      	beq.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a4e      	ldr	r2, [pc, #312]	; (8001f68 <HAL_GPIO_Init+0x30c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_GPIO_Init+0x200>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a4d      	ldr	r2, [pc, #308]	; (8001f6c <HAL_GPIO_Init+0x310>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_Init+0x1fc>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a4c      	ldr	r2, [pc, #304]	; (8001f70 <HAL_GPIO_Init+0x314>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x1f8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a4b      	ldr	r2, [pc, #300]	; (8001f74 <HAL_GPIO_Init+0x318>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_Init+0x1f4>
 8001e4c:	2306      	movs	r3, #6
 8001e4e:	e00c      	b.n	8001e6a <HAL_GPIO_Init+0x20e>
 8001e50:	2307      	movs	r3, #7
 8001e52:	e00a      	b.n	8001e6a <HAL_GPIO_Init+0x20e>
 8001e54:	2305      	movs	r3, #5
 8001e56:	e008      	b.n	8001e6a <HAL_GPIO_Init+0x20e>
 8001e58:	2304      	movs	r3, #4
 8001e5a:	e006      	b.n	8001e6a <HAL_GPIO_Init+0x20e>
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e004      	b.n	8001e6a <HAL_GPIO_Init+0x20e>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x20e>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_GPIO_Init+0x20e>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	f002 0203 	and.w	r2, r2, #3
 8001e70:	0092      	lsls	r2, r2, #2
 8001e72:	4093      	lsls	r3, r2
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e7a:	4937      	ldr	r1, [pc, #220]	; (8001f58 <HAL_GPIO_Init+0x2fc>)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e88:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_GPIO_Init+0x31c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eac:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <HAL_GPIO_Init+0x31c>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_GPIO_Init+0x31c>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ed6:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <HAL_GPIO_Init+0x31c>)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <HAL_GPIO_Init+0x31c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <HAL_GPIO_Init+0x31c>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_GPIO_Init+0x31c>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f2a:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <HAL_GPIO_Init+0x31c>)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3301      	adds	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f47f ae97 	bne.w	8001c74 <HAL_GPIO_Init+0x18>
  }
}
 8001f46:	bf00      	nop
 8001f48:	bf00      	nop
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40021400 	.word	0x40021400
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	619a      	str	r2, [r3, #24]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e31d      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fbe:	4b94      	ldr	r3, [pc, #592]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc8:	4b91      	ldr	r3, [pc, #580]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d07b      	beq.n	80020d6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d006      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	d10f      	bne.n	800200a <HAL_RCC_OscConfig+0x5e>
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff0:	d10b      	bne.n	800200a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff2:	4b87      	ldr	r3, [pc, #540]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d06a      	beq.n	80020d4 <HAL_RCC_OscConfig+0x128>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d166      	bne.n	80020d4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e2f7      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d106      	bne.n	8002020 <HAL_RCC_OscConfig+0x74>
 8002012:	4b7f      	ldr	r3, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7e      	ldr	r2, [pc, #504]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e02d      	b.n	800207c <HAL_RCC_OscConfig+0xd0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x96>
 8002028:	4b79      	ldr	r3, [pc, #484]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a78      	ldr	r2, [pc, #480]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b76      	ldr	r3, [pc, #472]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a75      	ldr	r2, [pc, #468]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0xd0>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0xb8>
 800204a:	4b71      	ldr	r3, [pc, #452]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a70      	ldr	r2, [pc, #448]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6d      	ldr	r2, [pc, #436]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0xd0>
 8002064:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a69      	ldr	r2, [pc, #420]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b67      	ldr	r3, [pc, #412]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a66      	ldr	r2, [pc, #408]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe fe2e 	bl	8000ce4 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800208c:	f7fe fe2a 	bl	8000ce4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e2ad      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800209e:	4b5c      	ldr	r3, [pc, #368]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0xe0>
 80020aa:	e014      	b.n	80020d6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe fe1a 	bl	8000ce4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b4:	f7fe fe16 	bl	8000ce4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e299      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020c6:	4b52      	ldr	r3, [pc, #328]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x108>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d05a      	beq.n	8002198 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d119      	bne.n	8002122 <HAL_RCC_OscConfig+0x176>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d116      	bne.n	8002122 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f4:	4b46      	ldr	r3, [pc, #280]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_OscConfig+0x160>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d001      	beq.n	800210c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e276      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b40      	ldr	r3, [pc, #256]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	493d      	ldr	r1, [pc, #244]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002120:	e03a      	b.n	8002198 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d020      	beq.n	800216c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_RCC_OscConfig+0x268>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe fdd8 	bl	8000ce4 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002138:	f7fe fdd4 	bl	8000ce4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e257      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800214a:	4b31      	ldr	r3, [pc, #196]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002156:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	492a      	ldr	r1, [pc, #168]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
 800216a:	e015      	b.n	8002198 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216c:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_RCC_OscConfig+0x268>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7fe fdb7 	bl	8000ce4 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217a:	f7fe fdb3 	bl	8000ce4 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e236      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800218c:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f0      	bne.n	800217a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80b8 	beq.w	8002316 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d170      	bne.n	800228e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_OscConfig+0x218>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e21a      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1a      	ldr	r2, [r3, #32]
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d921      	bls.n	8002218 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fc4b 	bl	8002a74 <RCC_SetFlashLatencyFromMSIRange>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e208      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4906      	ldr	r1, [pc, #24]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	061b      	lsls	r3, r3, #24
 8002208:	4901      	ldr	r1, [pc, #4]	; (8002210 <HAL_RCC_OscConfig+0x264>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
 800220e:	e020      	b.n	8002252 <HAL_RCC_OscConfig+0x2a6>
 8002210:	40023800 	.word	0x40023800
 8002214:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002218:	4ba4      	ldr	r3, [pc, #656]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	49a1      	ldr	r1, [pc, #644]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800222a:	4ba0      	ldr	r3, [pc, #640]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	061b      	lsls	r3, r3, #24
 8002238:	499c      	ldr	r1, [pc, #624]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fc16 	bl	8002a74 <RCC_SetFlashLatencyFromMSIRange>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1d3      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	0b5b      	lsrs	r3, r3, #13
 8002258:	3301      	adds	r3, #1
 800225a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002262:	4a92      	ldr	r2, [pc, #584]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 8002264:	6892      	ldr	r2, [r2, #8]
 8002266:	0912      	lsrs	r2, r2, #4
 8002268:	f002 020f 	and.w	r2, r2, #15
 800226c:	4990      	ldr	r1, [pc, #576]	; (80024b0 <HAL_RCC_OscConfig+0x504>)
 800226e:	5c8a      	ldrb	r2, [r1, r2]
 8002270:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002272:	4a90      	ldr	r2, [pc, #576]	; (80024b4 <HAL_RCC_OscConfig+0x508>)
 8002274:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002276:	4b90      	ldr	r3, [pc, #576]	; (80024b8 <HAL_RCC_OscConfig+0x50c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fce6 	bl	8000c4c <HAL_InitTick>
 8002280:	4603      	mov	r3, r0
 8002282:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d045      	beq.n	8002316 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	e1b5      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d029      	beq.n	80022ea <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002296:	4b89      	ldr	r3, [pc, #548]	; (80024bc <HAL_RCC_OscConfig+0x510>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe fd22 	bl	8000ce4 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a4:	f7fe fd1e 	bl	8000ce4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1a1      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022b6:	4b7d      	ldr	r3, [pc, #500]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c2:	4b7a      	ldr	r3, [pc, #488]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4977      	ldr	r1, [pc, #476]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d4:	4b75      	ldr	r3, [pc, #468]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	061b      	lsls	r3, r3, #24
 80022e2:	4972      	ldr	r1, [pc, #456]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022ea:	4b74      	ldr	r3, [pc, #464]	; (80024bc <HAL_RCC_OscConfig+0x510>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe fcf8 	bl	8000ce4 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f8:	f7fe fcf4 	bl	8000ce4 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e177      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800230a:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d030      	beq.n	8002384 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d016      	beq.n	8002358 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232a:	4b65      	ldr	r3, [pc, #404]	; (80024c0 <HAL_RCC_OscConfig+0x514>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7fe fcd8 	bl	8000ce4 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002338:	f7fe fcd4 	bl	8000ce4 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e157      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800234a:	4b58      	ldr	r3, [pc, #352]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x38c>
 8002356:	e015      	b.n	8002384 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_OscConfig+0x514>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235e:	f7fe fcc1 	bl	8000ce4 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002366:	f7fe fcbd 	bl	8000ce4 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e140      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002378:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800237a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80b5 	beq.w	80024fc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	4b42      	ldr	r3, [pc, #264]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	4a41      	ldr	r2, [pc, #260]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6253      	str	r3, [r2, #36]	; 0x24
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ba:	2301      	movs	r3, #1
 80023bc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCC_OscConfig+0x518>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d118      	bne.n	80023fc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ca:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <HAL_RCC_OscConfig+0x518>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a3d      	ldr	r2, [pc, #244]	; (80024c4 <HAL_RCC_OscConfig+0x518>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d6:	f7fe fc85 	bl	8000ce4 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7fe fc81 	bl	8000ce4 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b64      	cmp	r3, #100	; 0x64
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e104      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <HAL_RCC_OscConfig+0x518>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x466>
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	4a28      	ldr	r2, [pc, #160]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6353      	str	r3, [r2, #52]	; 0x34
 8002410:	e02d      	b.n	800246e <HAL_RCC_OscConfig+0x4c2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x488>
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	4a23      	ldr	r2, [pc, #140]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 8002420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002424:	6353      	str	r3, [r2, #52]	; 0x34
 8002426:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 8002428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800242c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002430:	6353      	str	r3, [r2, #52]	; 0x34
 8002432:	e01c      	b.n	800246e <HAL_RCC_OscConfig+0x4c2>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b05      	cmp	r3, #5
 800243a:	d10c      	bne.n	8002456 <HAL_RCC_OscConfig+0x4aa>
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002440:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 8002442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002446:	6353      	str	r3, [r2, #52]	; 0x34
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	4a17      	ldr	r2, [pc, #92]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	6353      	str	r3, [r2, #52]	; 0x34
 8002454:	e00b      	b.n	800246e <HAL_RCC_OscConfig+0x4c2>
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 8002458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245a:	4a14      	ldr	r2, [pc, #80]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 800245c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002460:	6353      	str	r3, [r2, #52]	; 0x34
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 8002464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002466:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 8002468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800246c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d015      	beq.n	80024a2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7fe fc35 	bl	8000ce4 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fc31 	bl	8000ce4 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0b2      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_OscConfig+0x500>)
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ee      	beq.n	800247e <HAL_RCC_OscConfig+0x4d2>
 80024a0:	e023      	b.n	80024ea <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe fc1f 	bl	8000ce4 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024a8:	e019      	b.n	80024de <HAL_RCC_OscConfig+0x532>
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08003db8 	.word	0x08003db8
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000004 	.word	0x20000004
 80024bc:	42470020 	.word	0x42470020
 80024c0:	42470680 	.word	0x42470680
 80024c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7fe fc0c 	bl	8000ce4 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e08d      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024de:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_RCC_OscConfig+0x658>)
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1ee      	bne.n	80024c8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ea:	7ffb      	ldrb	r3, [r7, #31]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d105      	bne.n	80024fc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f0:	4b44      	ldr	r3, [pc, #272]	; (8002604 <HAL_RCC_OscConfig+0x658>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	4a43      	ldr	r2, [pc, #268]	; (8002604 <HAL_RCC_OscConfig+0x658>)
 80024f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2b00      	cmp	r3, #0
 8002502:	d079      	beq.n	80025f8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d056      	beq.n	80025b8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	2b02      	cmp	r3, #2
 8002510:	d13b      	bne.n	800258a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_RCC_OscConfig+0x65c>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe fbe4 	bl	8000ce4 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fbe0 	bl	8000ce4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e063      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002532:	4b34      	ldr	r3, [pc, #208]	; (8002604 <HAL_RCC_OscConfig+0x658>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253e:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_RCC_OscConfig+0x658>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	4319      	orrs	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	430b      	orrs	r3, r1
 8002556:	492b      	ldr	r1, [pc, #172]	; (8002604 <HAL_RCC_OscConfig+0x658>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_RCC_OscConfig+0x65c>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7fe fbbf 	bl	8000ce4 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256a:	f7fe fbbb 	bl	8000ce4 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e03e      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_RCC_OscConfig+0x658>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x5be>
 8002588:	e036      	b.n	80025f8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_RCC_OscConfig+0x65c>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fba8 	bl	8000ce4 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fba4 	bl	8000ce4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e027      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <HAL_RCC_OscConfig+0x658>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x5ec>
 80025b6:	e01f      	b.n	80025f8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e01a      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_RCC_OscConfig+0x658>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d10d      	bne.n	80025f4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d106      	bne.n	80025f4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	42470060 	.word	0x42470060

0800260c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e11a      	b.n	8002856 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b8f      	ldr	r3, [pc, #572]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d919      	bls.n	8002662 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_ClockConfig+0x34>
 8002634:	4b8a      	ldr	r3, [pc, #552]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a89      	ldr	r2, [pc, #548]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b87      	ldr	r3, [pc, #540]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 0201 	bic.w	r2, r3, #1
 8002648:	4985      	ldr	r1, [pc, #532]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002650:	4b83      	ldr	r3, [pc, #524]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0f9      	b.n	8002856 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266e:	4b7d      	ldr	r3, [pc, #500]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	497a      	ldr	r1, [pc, #488]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 800267c:	4313      	orrs	r3, r2
 800267e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 808e 	beq.w	80027aa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002696:	4b73      	ldr	r3, [pc, #460]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0d7      	b.n	8002856 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026ae:	4b6d      	ldr	r3, [pc, #436]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d115      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0cb      	b.n	8002856 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c6:	4b67      	ldr	r3, [pc, #412]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0bf      	b.n	8002856 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026d6:	4b63      	ldr	r3, [pc, #396]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0b7      	b.n	8002856 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e6:	4b5f      	ldr	r3, [pc, #380]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f023 0203 	bic.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	495c      	ldr	r1, [pc, #368]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f8:	f7fe faf4 	bl	8000ce4 <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d112      	bne.n	800272c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002706:	e00a      	b.n	800271e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002708:	f7fe faec 	bl	8000ce4 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e09b      	b.n	8002856 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800271e:	4b51      	ldr	r3, [pc, #324]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b08      	cmp	r3, #8
 8002728:	d1ee      	bne.n	8002708 <HAL_RCC_ClockConfig+0xfc>
 800272a:	e03e      	b.n	80027aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d112      	bne.n	800275a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002734:	e00a      	b.n	800274c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002736:	f7fe fad5 	bl	8000ce4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e084      	b.n	8002856 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274c:	4b45      	ldr	r3, [pc, #276]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 030c 	and.w	r3, r3, #12
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_ClockConfig+0x12a>
 8002758:	e027      	b.n	80027aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d11d      	bne.n	800279e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002762:	e00a      	b.n	800277a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7fe fabe 	bl	8000ce4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e06d      	b.n	8002856 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800277a:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b04      	cmp	r3, #4
 8002784:	d1ee      	bne.n	8002764 <HAL_RCC_ClockConfig+0x158>
 8002786:	e010      	b.n	80027aa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7fe faac 	bl	8000ce4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e05b      	b.n	8002856 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ee      	bne.n	8002788 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027aa:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d219      	bcs.n	80027ec <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_ClockConfig+0x1be>
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b25      	ldr	r3, [pc, #148]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0201 	bic.w	r2, r3, #1
 80027d2:	4923      	ldr	r1, [pc, #140]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <HAL_RCC_ClockConfig+0x254>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e034      	b.n	8002856 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4917      	ldr	r1, [pc, #92]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	490f      	ldr	r1, [pc, #60]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 8002826:	4313      	orrs	r3, r2
 8002828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800282a:	f000 f823 	bl	8002874 <HAL_RCC_GetSysClockFreq>
 800282e:	4602      	mov	r2, r0
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <HAL_RCC_ClockConfig+0x258>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	490b      	ldr	r1, [pc, #44]	; (8002868 <HAL_RCC_ClockConfig+0x25c>)
 800283c:	5ccb      	ldrb	r3, [r1, r3]
 800283e:	fa22 f303 	lsr.w	r3, r2, r3
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x260>)
 8002844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_RCC_ClockConfig+0x264>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe f9fe 	bl	8000c4c <HAL_InitTick>
 8002850:	4603      	mov	r3, r0
 8002852:	72fb      	strb	r3, [r7, #11]

  return status;
 8002854:	7afb      	ldrb	r3, [r7, #11]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023c00 	.word	0x40023c00
 8002864:	40023800 	.word	0x40023800
 8002868:	08003db8 	.word	0x08003db8
 800286c:	20000000 	.word	0x20000000
 8002870:	20000004 	.word	0x20000004

08002874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002874:	b5b0      	push	{r4, r5, r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800287a:	4b61      	ldr	r3, [pc, #388]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x18c>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d00d      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x32>
 800288a:	2b0c      	cmp	r3, #12
 800288c:	f200 80a4 	bhi.w	80029d8 <HAL_RCC_GetSysClockFreq+0x164>
 8002890:	2b04      	cmp	r3, #4
 8002892:	d002      	beq.n	800289a <HAL_RCC_GetSysClockFreq+0x26>
 8002894:	2b08      	cmp	r3, #8
 8002896:	d003      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x2c>
 8002898:	e09e      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800289a:	4b5a      	ldr	r3, [pc, #360]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x190>)
 800289c:	613b      	str	r3, [r7, #16]
      break;
 800289e:	e0a9      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a0:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x194>)
 80028a2:	613b      	str	r3, [r7, #16]
      break;
 80028a4:	e0a6      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	0c9b      	lsrs	r3, r3, #18
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x198>)
 80028b0:	5cd3      	ldrb	r3, [r2, r3]
 80028b2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	0d9b      	lsrs	r3, r3, #22
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	3301      	adds	r3, #1
 80028be:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c0:	4b4f      	ldr	r3, [pc, #316]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x18c>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d041      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	461c      	mov	r4, r3
 80028d0:	f04f 0500 	mov.w	r5, #0
 80028d4:	4620      	mov	r0, r4
 80028d6:	4629      	mov	r1, r5
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	014b      	lsls	r3, r1, #5
 80028e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028e6:	0142      	lsls	r2, r0, #5
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	1b00      	subs	r0, r0, r4
 80028ee:	eb61 0105 	sbc.w	r1, r1, r5
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	018b      	lsls	r3, r1, #6
 80028fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002900:	0182      	lsls	r2, r0, #6
 8002902:	1a12      	subs	r2, r2, r0
 8002904:	eb63 0301 	sbc.w	r3, r3, r1
 8002908:	f04f 0000 	mov.w	r0, #0
 800290c:	f04f 0100 	mov.w	r1, #0
 8002910:	00d9      	lsls	r1, r3, #3
 8002912:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002916:	00d0      	lsls	r0, r2, #3
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	1912      	adds	r2, r2, r4
 800291e:	eb45 0303 	adc.w	r3, r5, r3
 8002922:	f04f 0000 	mov.w	r0, #0
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	0259      	lsls	r1, r3, #9
 800292c:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002930:	0250      	lsls	r0, r2, #9
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	461a      	mov	r2, r3
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	f7fd fc23 	bl	800018c <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4613      	mov	r3, r2
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	e040      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	461c      	mov	r4, r3
 8002954:	f04f 0500 	mov.w	r5, #0
 8002958:	4620      	mov	r0, r4
 800295a:	4629      	mov	r1, r5
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	014b      	lsls	r3, r1, #5
 8002966:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800296a:	0142      	lsls	r2, r0, #5
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	1b00      	subs	r0, r0, r4
 8002972:	eb61 0105 	sbc.w	r1, r1, r5
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	018b      	lsls	r3, r1, #6
 8002980:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002984:	0182      	lsls	r2, r0, #6
 8002986:	1a12      	subs	r2, r2, r0
 8002988:	eb63 0301 	sbc.w	r3, r3, r1
 800298c:	f04f 0000 	mov.w	r0, #0
 8002990:	f04f 0100 	mov.w	r1, #0
 8002994:	00d9      	lsls	r1, r3, #3
 8002996:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800299a:	00d0      	lsls	r0, r2, #3
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	1912      	adds	r2, r2, r4
 80029a2:	eb45 0303 	adc.w	r3, r5, r3
 80029a6:	f04f 0000 	mov.w	r0, #0
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	0299      	lsls	r1, r3, #10
 80029b0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029b4:	0290      	lsls	r0, r2, #10
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	461a      	mov	r2, r3
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f7fd fbe1 	bl	800018c <__aeabi_uldivmod>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4613      	mov	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	613b      	str	r3, [r7, #16]
      break;
 80029d6:	e00d      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x18c>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	0b5b      	lsrs	r3, r3, #13
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	613b      	str	r3, [r7, #16]
      break;
 80029f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f4:	693b      	ldr	r3, [r7, #16]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bdb0      	pop	{r4, r5, r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	00f42400 	.word	0x00f42400
 8002a08:	007a1200 	.word	0x007a1200
 8002a0c:	08003dac 	.word	0x08003dac

08002a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a14:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	20000000 	.word	0x20000000

08002a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a28:	f7ff fff2 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	0a1b      	lsrs	r3, r3, #8
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4903      	ldr	r1, [pc, #12]	; (8002a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	08003dc8 	.word	0x08003dc8

08002a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a50:	f7ff ffde 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	0adb      	lsrs	r3, r3, #11
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	4903      	ldr	r1, [pc, #12]	; (8002a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a62:	5ccb      	ldrb	r3, [r1, r3]
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	08003dc8 	.word	0x08003dc8

08002a74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a80:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d12c      	bne.n	8002ae6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a8c:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002a98:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e016      	b.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa4:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aae:	6253      	str	r3, [r2, #36]	; 0x24
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002ac4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ad8:	d105      	bne.n	8002ae6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ae0:	d101      	bne.n	8002ae6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002af2:	f043 0304 	orr.w	r3, r3, #4
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 0201 	bic.w	r2, r3, #1
 8002b00:	490b      	ldr	r1, [pc, #44]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d001      	beq.n	8002b1a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e031      	b.n	8002baa <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fd ff6a 	bl	8000a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f000 f92c 	bl	8002dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d001      	beq.n	8002bcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e032      	b.n	8002c32 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d00e      	beq.n	8002bfc <HAL_TIM_Base_Start+0x48>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <HAL_TIM_Base_Start+0x88>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_TIM_Base_Start+0x48>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <HAL_TIM_Base_Start+0x8c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_TIM_Base_Start+0x48>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <HAL_TIM_Base_Start+0x90>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d111      	bne.n	8002c20 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d010      	beq.n	8002c30 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	e007      	b.n	8002c30 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40010800 	.word	0x40010800

08002c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_TIM_ConfigClockSource+0x18>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e0b3      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x180>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c98:	d03e      	beq.n	8002d18 <HAL_TIM_ConfigClockSource+0xd0>
 8002c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9e:	f200 8087 	bhi.w	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca6:	f000 8085 	beq.w	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
 8002caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cae:	d87f      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cb0:	2b70      	cmp	r3, #112	; 0x70
 8002cb2:	d01a      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0xa2>
 8002cb4:	2b70      	cmp	r3, #112	; 0x70
 8002cb6:	d87b      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cb8:	2b60      	cmp	r3, #96	; 0x60
 8002cba:	d050      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x116>
 8002cbc:	2b60      	cmp	r3, #96	; 0x60
 8002cbe:	d877      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cc0:	2b50      	cmp	r3, #80	; 0x50
 8002cc2:	d03c      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0xf6>
 8002cc4:	2b50      	cmp	r3, #80	; 0x50
 8002cc6:	d873      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cc8:	2b40      	cmp	r3, #64	; 0x40
 8002cca:	d058      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x136>
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d86f      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cd0:	2b30      	cmp	r3, #48	; 0x30
 8002cd2:	d064      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
 8002cd4:	2b30      	cmp	r3, #48	; 0x30
 8002cd6:	d86b      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d060      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d867      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d05c      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d05a      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ce8:	e062      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6899      	ldr	r1, [r3, #8]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f000 f950 	bl	8002f9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	609a      	str	r2, [r3, #8]
      break;
 8002d16:	e04e      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6899      	ldr	r1, [r3, #8]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f000 f939 	bl	8002f9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d3a:	609a      	str	r2, [r3, #8]
      break;
 8002d3c:	e03b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f000 f8b0 	bl	8002eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2150      	movs	r1, #80	; 0x50
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f907 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002d5c:	e02b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f000 f8ce 	bl	8002f0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2160      	movs	r1, #96	; 0x60
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 f8f7 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002d7c:	e01b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f000 f890 	bl	8002eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2140      	movs	r1, #64	; 0x40
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 f8e7 	bl	8002f6a <TIM_ITRx_SetConfig>
      break;
 8002d9c:	e00b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	4610      	mov	r0, r2
 8002daa:	f000 f8de 	bl	8002f6a <TIM_ITRx_SetConfig>
        break;
 8002dae:	e002      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002db4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d00f      	beq.n	8002e08 <TIM_Base_SetConfig+0x38>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a2b      	ldr	r2, [pc, #172]	; (8002e98 <TIM_Base_SetConfig+0xc8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <TIM_Base_SetConfig+0x38>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a2a      	ldr	r2, [pc, #168]	; (8002e9c <TIM_Base_SetConfig+0xcc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <TIM_Base_SetConfig+0x38>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a29      	ldr	r2, [pc, #164]	; (8002ea0 <TIM_Base_SetConfig+0xd0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_Base_SetConfig+0x38>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <TIM_Base_SetConfig+0xd4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d108      	bne.n	8002e1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d017      	beq.n	8002e52 <TIM_Base_SetConfig+0x82>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a1c      	ldr	r2, [pc, #112]	; (8002e98 <TIM_Base_SetConfig+0xc8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <TIM_Base_SetConfig+0x82>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <TIM_Base_SetConfig+0xcc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00f      	beq.n	8002e52 <TIM_Base_SetConfig+0x82>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1a      	ldr	r2, [pc, #104]	; (8002ea0 <TIM_Base_SetConfig+0xd0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_Base_SetConfig+0x82>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	; (8002ea4 <TIM_Base_SetConfig+0xd4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <TIM_Base_SetConfig+0x82>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <TIM_Base_SetConfig+0xd8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_Base_SetConfig+0x82>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a17      	ldr	r2, [pc, #92]	; (8002eac <TIM_Base_SetConfig+0xdc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d108      	bne.n	8002e64 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	615a      	str	r2, [r3, #20]
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40000800 	.word	0x40000800
 8002ea0:	40000c00 	.word	0x40000c00
 8002ea4:	40010800 	.word	0x40010800
 8002ea8:	40010c00 	.word	0x40010c00
 8002eac:	40011000 	.word	0x40011000

08002eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f023 0201 	bic.w	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f023 030a 	bic.w	r3, r3, #10
 8002eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f023 0210 	bic.w	r2, r3, #16
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	031b      	lsls	r3, r3, #12
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	621a      	str	r2, [r3, #32]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f043 0307 	orr.w	r3, r3, #7
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	609a      	str	r2, [r3, #8]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b087      	sub	sp, #28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	021a      	lsls	r2, r3, #8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	609a      	str	r2, [r3, #8]
}
 8002fd2:	bf00      	nop
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e046      	b.n	8003082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003036:	d00e      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a13      	ldr	r2, [pc, #76]	; (800308c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a10      	ldr	r2, [pc, #64]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d10c      	bne.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800305c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	4313      	orrs	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800
 8003094:	40010800 	.word	0x40010800

08003098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e03f      	b.n	800312a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fd fcd4 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	; 0x24
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f905 	bl	80032ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b08a      	sub	sp, #40	; 0x28
 8003136:	af02      	add	r7, sp, #8
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b20      	cmp	r3, #32
 8003150:	d17c      	bne.n	800324c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_UART_Transmit+0x2c>
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e075      	b.n	800324e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_UART_Transmit+0x3e>
 800316c:	2302      	movs	r3, #2
 800316e:	e06e      	b.n	800324e <HAL_UART_Transmit+0x11c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2221      	movs	r2, #33	; 0x21
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003186:	f7fd fdad 	bl	8000ce4 <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a0:	d108      	bne.n	80031b4 <HAL_UART_Transmit+0x82>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d104      	bne.n	80031b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e003      	b.n	80031bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031c4:	e02a      	b.n	800321c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2180      	movs	r1, #128	; 0x80
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f840 	bl	8003256 <UART_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e036      	b.n	800324e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	3302      	adds	r3, #2
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	e007      	b.n	800320e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	3301      	adds	r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1cf      	bne.n	80031c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2200      	movs	r2, #0
 800322e:	2140      	movs	r1, #64	; 0x40
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f810 	bl	8003256 <UART_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e006      	b.n	800324e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003266:	e02c      	b.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d028      	beq.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <UART_WaitOnFlagUntilTimeout+0x30>
 8003276:	f7fd fd35 	bl	8000ce4 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	429a      	cmp	r2, r3
 8003284:	d21d      	bcs.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003294:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e00f      	b.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4013      	ands	r3, r2
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	bf0c      	ite	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	2300      	movne	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d0c3      	beq.n	8003268 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	4313      	orrs	r3, r2
 8003320:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800332c:	f023 030c 	bic.w	r3, r3, #12
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	430b      	orrs	r3, r1
 8003338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699a      	ldr	r2, [r3, #24]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a55      	ldr	r2, [pc, #340]	; (80034ac <UART_SetConfig+0x1c0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d103      	bne.n	8003362 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800335a:	f7ff fb77 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	e002      	b.n	8003368 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003362:	f7ff fb5f 	bl	8002a24 <HAL_RCC_GetPCLK1Freq>
 8003366:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003370:	d14c      	bne.n	800340c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	009a      	lsls	r2, r3, #2
 800337c:	441a      	add	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	4a49      	ldr	r2, [pc, #292]	; (80034b0 <UART_SetConfig+0x1c4>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	0119      	lsls	r1, r3, #4
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	009a      	lsls	r2, r3, #2
 800339c:	441a      	add	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a8:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <UART_SetConfig+0x1c4>)
 80033aa:	fba3 0302 	umull	r0, r3, r3, r2
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2064      	movs	r0, #100	; 0x64
 80033b2:	fb00 f303 	mul.w	r3, r0, r3
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	3332      	adds	r3, #50	; 0x32
 80033bc:	4a3c      	ldr	r2, [pc, #240]	; (80034b0 <UART_SetConfig+0x1c4>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033ca:	4419      	add	r1, r3
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	009a      	lsls	r2, r3, #2
 80033d6:	441a      	add	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e2:	4b33      	ldr	r3, [pc, #204]	; (80034b0 <UART_SetConfig+0x1c4>)
 80033e4:	fba3 0302 	umull	r0, r3, r3, r2
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	2064      	movs	r0, #100	; 0x64
 80033ec:	fb00 f303 	mul.w	r3, r0, r3
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	3332      	adds	r3, #50	; 0x32
 80033f6:	4a2e      	ldr	r2, [pc, #184]	; (80034b0 <UART_SetConfig+0x1c4>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	f003 0207 	and.w	r2, r3, #7
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	440a      	add	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800340a:	e04a      	b.n	80034a2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	009a      	lsls	r2, r3, #2
 8003416:	441a      	add	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003422:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <UART_SetConfig+0x1c4>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	0119      	lsls	r1, r3, #4
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	009a      	lsls	r2, r3, #2
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003442:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <UART_SetConfig+0x1c4>)
 8003444:	fba3 0302 	umull	r0, r3, r3, r2
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	2064      	movs	r0, #100	; 0x64
 800344c:	fb00 f303 	mul.w	r3, r0, r3
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	3332      	adds	r3, #50	; 0x32
 8003456:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <UART_SetConfig+0x1c4>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003462:	4419      	add	r1, r3
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	009a      	lsls	r2, r3, #2
 800346e:	441a      	add	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	fbb2 f2f3 	udiv	r2, r2, r3
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <UART_SetConfig+0x1c4>)
 800347c:	fba3 0302 	umull	r0, r3, r3, r2
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	2064      	movs	r0, #100	; 0x64
 8003484:	fb00 f303 	mul.w	r3, r0, r3
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	3332      	adds	r3, #50	; 0x32
 800348e:	4a08      	ldr	r2, [pc, #32]	; (80034b0 <UART_SetConfig+0x1c4>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	f003 020f 	and.w	r2, r3, #15
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	440a      	add	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40013800 	.word	0x40013800
 80034b0:	51eb851f 	.word	0x51eb851f

080034b4 <__errno>:
 80034b4:	4b01      	ldr	r3, [pc, #4]	; (80034bc <__errno+0x8>)
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	2000000c 	.word	0x2000000c

080034c0 <__libc_init_array>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	2600      	movs	r6, #0
 80034c4:	4d0c      	ldr	r5, [pc, #48]	; (80034f8 <__libc_init_array+0x38>)
 80034c6:	4c0d      	ldr	r4, [pc, #52]	; (80034fc <__libc_init_array+0x3c>)
 80034c8:	1b64      	subs	r4, r4, r5
 80034ca:	10a4      	asrs	r4, r4, #2
 80034cc:	42a6      	cmp	r6, r4
 80034ce:	d109      	bne.n	80034e4 <__libc_init_array+0x24>
 80034d0:	f000 fc5c 	bl	8003d8c <_init>
 80034d4:	2600      	movs	r6, #0
 80034d6:	4d0a      	ldr	r5, [pc, #40]	; (8003500 <__libc_init_array+0x40>)
 80034d8:	4c0a      	ldr	r4, [pc, #40]	; (8003504 <__libc_init_array+0x44>)
 80034da:	1b64      	subs	r4, r4, r5
 80034dc:	10a4      	asrs	r4, r4, #2
 80034de:	42a6      	cmp	r6, r4
 80034e0:	d105      	bne.n	80034ee <__libc_init_array+0x2e>
 80034e2:	bd70      	pop	{r4, r5, r6, pc}
 80034e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e8:	4798      	blx	r3
 80034ea:	3601      	adds	r6, #1
 80034ec:	e7ee      	b.n	80034cc <__libc_init_array+0xc>
 80034ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f2:	4798      	blx	r3
 80034f4:	3601      	adds	r6, #1
 80034f6:	e7f2      	b.n	80034de <__libc_init_array+0x1e>
 80034f8:	08003e0c 	.word	0x08003e0c
 80034fc:	08003e0c 	.word	0x08003e0c
 8003500:	08003e0c 	.word	0x08003e0c
 8003504:	08003e10 	.word	0x08003e10

08003508 <memset>:
 8003508:	4603      	mov	r3, r0
 800350a:	4402      	add	r2, r0
 800350c:	4293      	cmp	r3, r2
 800350e:	d100      	bne.n	8003512 <memset+0xa>
 8003510:	4770      	bx	lr
 8003512:	f803 1b01 	strb.w	r1, [r3], #1
 8003516:	e7f9      	b.n	800350c <memset+0x4>

08003518 <siprintf>:
 8003518:	b40e      	push	{r1, r2, r3}
 800351a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800351e:	b500      	push	{lr}
 8003520:	b09c      	sub	sp, #112	; 0x70
 8003522:	ab1d      	add	r3, sp, #116	; 0x74
 8003524:	9002      	str	r0, [sp, #8]
 8003526:	9006      	str	r0, [sp, #24]
 8003528:	9107      	str	r1, [sp, #28]
 800352a:	9104      	str	r1, [sp, #16]
 800352c:	4808      	ldr	r0, [pc, #32]	; (8003550 <siprintf+0x38>)
 800352e:	4909      	ldr	r1, [pc, #36]	; (8003554 <siprintf+0x3c>)
 8003530:	f853 2b04 	ldr.w	r2, [r3], #4
 8003534:	9105      	str	r1, [sp, #20]
 8003536:	6800      	ldr	r0, [r0, #0]
 8003538:	a902      	add	r1, sp, #8
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	f000 f868 	bl	8003610 <_svfiprintf_r>
 8003540:	2200      	movs	r2, #0
 8003542:	9b02      	ldr	r3, [sp, #8]
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	b01c      	add	sp, #112	; 0x70
 8003548:	f85d eb04 	ldr.w	lr, [sp], #4
 800354c:	b003      	add	sp, #12
 800354e:	4770      	bx	lr
 8003550:	2000000c 	.word	0x2000000c
 8003554:	ffff0208 	.word	0xffff0208

08003558 <__ssputs_r>:
 8003558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	688e      	ldr	r6, [r1, #8]
 800355e:	4682      	mov	sl, r0
 8003560:	429e      	cmp	r6, r3
 8003562:	460c      	mov	r4, r1
 8003564:	4690      	mov	r8, r2
 8003566:	461f      	mov	r7, r3
 8003568:	d838      	bhi.n	80035dc <__ssputs_r+0x84>
 800356a:	898a      	ldrh	r2, [r1, #12]
 800356c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003570:	d032      	beq.n	80035d8 <__ssputs_r+0x80>
 8003572:	6825      	ldr	r5, [r4, #0]
 8003574:	6909      	ldr	r1, [r1, #16]
 8003576:	3301      	adds	r3, #1
 8003578:	eba5 0901 	sub.w	r9, r5, r1
 800357c:	6965      	ldr	r5, [r4, #20]
 800357e:	444b      	add	r3, r9
 8003580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003588:	106d      	asrs	r5, r5, #1
 800358a:	429d      	cmp	r5, r3
 800358c:	bf38      	it	cc
 800358e:	461d      	movcc	r5, r3
 8003590:	0553      	lsls	r3, r2, #21
 8003592:	d531      	bpl.n	80035f8 <__ssputs_r+0xa0>
 8003594:	4629      	mov	r1, r5
 8003596:	f000 fb53 	bl	8003c40 <_malloc_r>
 800359a:	4606      	mov	r6, r0
 800359c:	b950      	cbnz	r0, 80035b4 <__ssputs_r+0x5c>
 800359e:	230c      	movs	r3, #12
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	f8ca 3000 	str.w	r3, [sl]
 80035a8:	89a3      	ldrh	r3, [r4, #12]
 80035aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ae:	81a3      	strh	r3, [r4, #12]
 80035b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b4:	464a      	mov	r2, r9
 80035b6:	6921      	ldr	r1, [r4, #16]
 80035b8:	f000 face 	bl	8003b58 <memcpy>
 80035bc:	89a3      	ldrh	r3, [r4, #12]
 80035be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c6:	81a3      	strh	r3, [r4, #12]
 80035c8:	6126      	str	r6, [r4, #16]
 80035ca:	444e      	add	r6, r9
 80035cc:	6026      	str	r6, [r4, #0]
 80035ce:	463e      	mov	r6, r7
 80035d0:	6165      	str	r5, [r4, #20]
 80035d2:	eba5 0509 	sub.w	r5, r5, r9
 80035d6:	60a5      	str	r5, [r4, #8]
 80035d8:	42be      	cmp	r6, r7
 80035da:	d900      	bls.n	80035de <__ssputs_r+0x86>
 80035dc:	463e      	mov	r6, r7
 80035de:	4632      	mov	r2, r6
 80035e0:	4641      	mov	r1, r8
 80035e2:	6820      	ldr	r0, [r4, #0]
 80035e4:	f000 fac6 	bl	8003b74 <memmove>
 80035e8:	68a3      	ldr	r3, [r4, #8]
 80035ea:	6822      	ldr	r2, [r4, #0]
 80035ec:	1b9b      	subs	r3, r3, r6
 80035ee:	4432      	add	r2, r6
 80035f0:	2000      	movs	r0, #0
 80035f2:	60a3      	str	r3, [r4, #8]
 80035f4:	6022      	str	r2, [r4, #0]
 80035f6:	e7db      	b.n	80035b0 <__ssputs_r+0x58>
 80035f8:	462a      	mov	r2, r5
 80035fa:	f000 fb7b 	bl	8003cf4 <_realloc_r>
 80035fe:	4606      	mov	r6, r0
 8003600:	2800      	cmp	r0, #0
 8003602:	d1e1      	bne.n	80035c8 <__ssputs_r+0x70>
 8003604:	4650      	mov	r0, sl
 8003606:	6921      	ldr	r1, [r4, #16]
 8003608:	f000 face 	bl	8003ba8 <_free_r>
 800360c:	e7c7      	b.n	800359e <__ssputs_r+0x46>
	...

08003610 <_svfiprintf_r>:
 8003610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003614:	4698      	mov	r8, r3
 8003616:	898b      	ldrh	r3, [r1, #12]
 8003618:	4607      	mov	r7, r0
 800361a:	061b      	lsls	r3, r3, #24
 800361c:	460d      	mov	r5, r1
 800361e:	4614      	mov	r4, r2
 8003620:	b09d      	sub	sp, #116	; 0x74
 8003622:	d50e      	bpl.n	8003642 <_svfiprintf_r+0x32>
 8003624:	690b      	ldr	r3, [r1, #16]
 8003626:	b963      	cbnz	r3, 8003642 <_svfiprintf_r+0x32>
 8003628:	2140      	movs	r1, #64	; 0x40
 800362a:	f000 fb09 	bl	8003c40 <_malloc_r>
 800362e:	6028      	str	r0, [r5, #0]
 8003630:	6128      	str	r0, [r5, #16]
 8003632:	b920      	cbnz	r0, 800363e <_svfiprintf_r+0x2e>
 8003634:	230c      	movs	r3, #12
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	e0d1      	b.n	80037e2 <_svfiprintf_r+0x1d2>
 800363e:	2340      	movs	r3, #64	; 0x40
 8003640:	616b      	str	r3, [r5, #20]
 8003642:	2300      	movs	r3, #0
 8003644:	9309      	str	r3, [sp, #36]	; 0x24
 8003646:	2320      	movs	r3, #32
 8003648:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800364c:	2330      	movs	r3, #48	; 0x30
 800364e:	f04f 0901 	mov.w	r9, #1
 8003652:	f8cd 800c 	str.w	r8, [sp, #12]
 8003656:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80037fc <_svfiprintf_r+0x1ec>
 800365a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800365e:	4623      	mov	r3, r4
 8003660:	469a      	mov	sl, r3
 8003662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003666:	b10a      	cbz	r2, 800366c <_svfiprintf_r+0x5c>
 8003668:	2a25      	cmp	r2, #37	; 0x25
 800366a:	d1f9      	bne.n	8003660 <_svfiprintf_r+0x50>
 800366c:	ebba 0b04 	subs.w	fp, sl, r4
 8003670:	d00b      	beq.n	800368a <_svfiprintf_r+0x7a>
 8003672:	465b      	mov	r3, fp
 8003674:	4622      	mov	r2, r4
 8003676:	4629      	mov	r1, r5
 8003678:	4638      	mov	r0, r7
 800367a:	f7ff ff6d 	bl	8003558 <__ssputs_r>
 800367e:	3001      	adds	r0, #1
 8003680:	f000 80aa 	beq.w	80037d8 <_svfiprintf_r+0x1c8>
 8003684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003686:	445a      	add	r2, fp
 8003688:	9209      	str	r2, [sp, #36]	; 0x24
 800368a:	f89a 3000 	ldrb.w	r3, [sl]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80a2 	beq.w	80037d8 <_svfiprintf_r+0x1c8>
 8003694:	2300      	movs	r3, #0
 8003696:	f04f 32ff 	mov.w	r2, #4294967295
 800369a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800369e:	f10a 0a01 	add.w	sl, sl, #1
 80036a2:	9304      	str	r3, [sp, #16]
 80036a4:	9307      	str	r3, [sp, #28]
 80036a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036aa:	931a      	str	r3, [sp, #104]	; 0x68
 80036ac:	4654      	mov	r4, sl
 80036ae:	2205      	movs	r2, #5
 80036b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b4:	4851      	ldr	r0, [pc, #324]	; (80037fc <_svfiprintf_r+0x1ec>)
 80036b6:	f000 fa41 	bl	8003b3c <memchr>
 80036ba:	9a04      	ldr	r2, [sp, #16]
 80036bc:	b9d8      	cbnz	r0, 80036f6 <_svfiprintf_r+0xe6>
 80036be:	06d0      	lsls	r0, r2, #27
 80036c0:	bf44      	itt	mi
 80036c2:	2320      	movmi	r3, #32
 80036c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036c8:	0711      	lsls	r1, r2, #28
 80036ca:	bf44      	itt	mi
 80036cc:	232b      	movmi	r3, #43	; 0x2b
 80036ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036d2:	f89a 3000 	ldrb.w	r3, [sl]
 80036d6:	2b2a      	cmp	r3, #42	; 0x2a
 80036d8:	d015      	beq.n	8003706 <_svfiprintf_r+0xf6>
 80036da:	4654      	mov	r4, sl
 80036dc:	2000      	movs	r0, #0
 80036de:	f04f 0c0a 	mov.w	ip, #10
 80036e2:	9a07      	ldr	r2, [sp, #28]
 80036e4:	4621      	mov	r1, r4
 80036e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036ea:	3b30      	subs	r3, #48	; 0x30
 80036ec:	2b09      	cmp	r3, #9
 80036ee:	d94e      	bls.n	800378e <_svfiprintf_r+0x17e>
 80036f0:	b1b0      	cbz	r0, 8003720 <_svfiprintf_r+0x110>
 80036f2:	9207      	str	r2, [sp, #28]
 80036f4:	e014      	b.n	8003720 <_svfiprintf_r+0x110>
 80036f6:	eba0 0308 	sub.w	r3, r0, r8
 80036fa:	fa09 f303 	lsl.w	r3, r9, r3
 80036fe:	4313      	orrs	r3, r2
 8003700:	46a2      	mov	sl, r4
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	e7d2      	b.n	80036ac <_svfiprintf_r+0x9c>
 8003706:	9b03      	ldr	r3, [sp, #12]
 8003708:	1d19      	adds	r1, r3, #4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	9103      	str	r1, [sp, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	bfbb      	ittet	lt
 8003712:	425b      	neglt	r3, r3
 8003714:	f042 0202 	orrlt.w	r2, r2, #2
 8003718:	9307      	strge	r3, [sp, #28]
 800371a:	9307      	strlt	r3, [sp, #28]
 800371c:	bfb8      	it	lt
 800371e:	9204      	strlt	r2, [sp, #16]
 8003720:	7823      	ldrb	r3, [r4, #0]
 8003722:	2b2e      	cmp	r3, #46	; 0x2e
 8003724:	d10c      	bne.n	8003740 <_svfiprintf_r+0x130>
 8003726:	7863      	ldrb	r3, [r4, #1]
 8003728:	2b2a      	cmp	r3, #42	; 0x2a
 800372a:	d135      	bne.n	8003798 <_svfiprintf_r+0x188>
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	3402      	adds	r4, #2
 8003730:	1d1a      	adds	r2, r3, #4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	9203      	str	r2, [sp, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	bfb8      	it	lt
 800373a:	f04f 33ff 	movlt.w	r3, #4294967295
 800373e:	9305      	str	r3, [sp, #20]
 8003740:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800380c <_svfiprintf_r+0x1fc>
 8003744:	2203      	movs	r2, #3
 8003746:	4650      	mov	r0, sl
 8003748:	7821      	ldrb	r1, [r4, #0]
 800374a:	f000 f9f7 	bl	8003b3c <memchr>
 800374e:	b140      	cbz	r0, 8003762 <_svfiprintf_r+0x152>
 8003750:	2340      	movs	r3, #64	; 0x40
 8003752:	eba0 000a 	sub.w	r0, r0, sl
 8003756:	fa03 f000 	lsl.w	r0, r3, r0
 800375a:	9b04      	ldr	r3, [sp, #16]
 800375c:	3401      	adds	r4, #1
 800375e:	4303      	orrs	r3, r0
 8003760:	9304      	str	r3, [sp, #16]
 8003762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003766:	2206      	movs	r2, #6
 8003768:	4825      	ldr	r0, [pc, #148]	; (8003800 <_svfiprintf_r+0x1f0>)
 800376a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800376e:	f000 f9e5 	bl	8003b3c <memchr>
 8003772:	2800      	cmp	r0, #0
 8003774:	d038      	beq.n	80037e8 <_svfiprintf_r+0x1d8>
 8003776:	4b23      	ldr	r3, [pc, #140]	; (8003804 <_svfiprintf_r+0x1f4>)
 8003778:	bb1b      	cbnz	r3, 80037c2 <_svfiprintf_r+0x1b2>
 800377a:	9b03      	ldr	r3, [sp, #12]
 800377c:	3307      	adds	r3, #7
 800377e:	f023 0307 	bic.w	r3, r3, #7
 8003782:	3308      	adds	r3, #8
 8003784:	9303      	str	r3, [sp, #12]
 8003786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003788:	4433      	add	r3, r6
 800378a:	9309      	str	r3, [sp, #36]	; 0x24
 800378c:	e767      	b.n	800365e <_svfiprintf_r+0x4e>
 800378e:	460c      	mov	r4, r1
 8003790:	2001      	movs	r0, #1
 8003792:	fb0c 3202 	mla	r2, ip, r2, r3
 8003796:	e7a5      	b.n	80036e4 <_svfiprintf_r+0xd4>
 8003798:	2300      	movs	r3, #0
 800379a:	f04f 0c0a 	mov.w	ip, #10
 800379e:	4619      	mov	r1, r3
 80037a0:	3401      	adds	r4, #1
 80037a2:	9305      	str	r3, [sp, #20]
 80037a4:	4620      	mov	r0, r4
 80037a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037aa:	3a30      	subs	r2, #48	; 0x30
 80037ac:	2a09      	cmp	r2, #9
 80037ae:	d903      	bls.n	80037b8 <_svfiprintf_r+0x1a8>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0c5      	beq.n	8003740 <_svfiprintf_r+0x130>
 80037b4:	9105      	str	r1, [sp, #20]
 80037b6:	e7c3      	b.n	8003740 <_svfiprintf_r+0x130>
 80037b8:	4604      	mov	r4, r0
 80037ba:	2301      	movs	r3, #1
 80037bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80037c0:	e7f0      	b.n	80037a4 <_svfiprintf_r+0x194>
 80037c2:	ab03      	add	r3, sp, #12
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	462a      	mov	r2, r5
 80037c8:	4638      	mov	r0, r7
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <_svfiprintf_r+0x1f8>)
 80037cc:	a904      	add	r1, sp, #16
 80037ce:	f3af 8000 	nop.w
 80037d2:	1c42      	adds	r2, r0, #1
 80037d4:	4606      	mov	r6, r0
 80037d6:	d1d6      	bne.n	8003786 <_svfiprintf_r+0x176>
 80037d8:	89ab      	ldrh	r3, [r5, #12]
 80037da:	065b      	lsls	r3, r3, #25
 80037dc:	f53f af2c 	bmi.w	8003638 <_svfiprintf_r+0x28>
 80037e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037e2:	b01d      	add	sp, #116	; 0x74
 80037e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e8:	ab03      	add	r3, sp, #12
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	462a      	mov	r2, r5
 80037ee:	4638      	mov	r0, r7
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <_svfiprintf_r+0x1f8>)
 80037f2:	a904      	add	r1, sp, #16
 80037f4:	f000 f87c 	bl	80038f0 <_printf_i>
 80037f8:	e7eb      	b.n	80037d2 <_svfiprintf_r+0x1c2>
 80037fa:	bf00      	nop
 80037fc:	08003dd0 	.word	0x08003dd0
 8003800:	08003dda 	.word	0x08003dda
 8003804:	00000000 	.word	0x00000000
 8003808:	08003559 	.word	0x08003559
 800380c:	08003dd6 	.word	0x08003dd6

08003810 <_printf_common>:
 8003810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003814:	4616      	mov	r6, r2
 8003816:	4699      	mov	r9, r3
 8003818:	688a      	ldr	r2, [r1, #8]
 800381a:	690b      	ldr	r3, [r1, #16]
 800381c:	4607      	mov	r7, r0
 800381e:	4293      	cmp	r3, r2
 8003820:	bfb8      	it	lt
 8003822:	4613      	movlt	r3, r2
 8003824:	6033      	str	r3, [r6, #0]
 8003826:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800382a:	460c      	mov	r4, r1
 800382c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003830:	b10a      	cbz	r2, 8003836 <_printf_common+0x26>
 8003832:	3301      	adds	r3, #1
 8003834:	6033      	str	r3, [r6, #0]
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	0699      	lsls	r1, r3, #26
 800383a:	bf42      	ittt	mi
 800383c:	6833      	ldrmi	r3, [r6, #0]
 800383e:	3302      	addmi	r3, #2
 8003840:	6033      	strmi	r3, [r6, #0]
 8003842:	6825      	ldr	r5, [r4, #0]
 8003844:	f015 0506 	ands.w	r5, r5, #6
 8003848:	d106      	bne.n	8003858 <_printf_common+0x48>
 800384a:	f104 0a19 	add.w	sl, r4, #25
 800384e:	68e3      	ldr	r3, [r4, #12]
 8003850:	6832      	ldr	r2, [r6, #0]
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	42ab      	cmp	r3, r5
 8003856:	dc28      	bgt.n	80038aa <_printf_common+0x9a>
 8003858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800385c:	1e13      	subs	r3, r2, #0
 800385e:	6822      	ldr	r2, [r4, #0]
 8003860:	bf18      	it	ne
 8003862:	2301      	movne	r3, #1
 8003864:	0692      	lsls	r2, r2, #26
 8003866:	d42d      	bmi.n	80038c4 <_printf_common+0xb4>
 8003868:	4649      	mov	r1, r9
 800386a:	4638      	mov	r0, r7
 800386c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003870:	47c0      	blx	r8
 8003872:	3001      	adds	r0, #1
 8003874:	d020      	beq.n	80038b8 <_printf_common+0xa8>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	68e5      	ldr	r5, [r4, #12]
 800387a:	f003 0306 	and.w	r3, r3, #6
 800387e:	2b04      	cmp	r3, #4
 8003880:	bf18      	it	ne
 8003882:	2500      	movne	r5, #0
 8003884:	6832      	ldr	r2, [r6, #0]
 8003886:	f04f 0600 	mov.w	r6, #0
 800388a:	68a3      	ldr	r3, [r4, #8]
 800388c:	bf08      	it	eq
 800388e:	1aad      	subeq	r5, r5, r2
 8003890:	6922      	ldr	r2, [r4, #16]
 8003892:	bf08      	it	eq
 8003894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003898:	4293      	cmp	r3, r2
 800389a:	bfc4      	itt	gt
 800389c:	1a9b      	subgt	r3, r3, r2
 800389e:	18ed      	addgt	r5, r5, r3
 80038a0:	341a      	adds	r4, #26
 80038a2:	42b5      	cmp	r5, r6
 80038a4:	d11a      	bne.n	80038dc <_printf_common+0xcc>
 80038a6:	2000      	movs	r0, #0
 80038a8:	e008      	b.n	80038bc <_printf_common+0xac>
 80038aa:	2301      	movs	r3, #1
 80038ac:	4652      	mov	r2, sl
 80038ae:	4649      	mov	r1, r9
 80038b0:	4638      	mov	r0, r7
 80038b2:	47c0      	blx	r8
 80038b4:	3001      	adds	r0, #1
 80038b6:	d103      	bne.n	80038c0 <_printf_common+0xb0>
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c0:	3501      	adds	r5, #1
 80038c2:	e7c4      	b.n	800384e <_printf_common+0x3e>
 80038c4:	2030      	movs	r0, #48	; 0x30
 80038c6:	18e1      	adds	r1, r4, r3
 80038c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038d2:	4422      	add	r2, r4
 80038d4:	3302      	adds	r3, #2
 80038d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038da:	e7c5      	b.n	8003868 <_printf_common+0x58>
 80038dc:	2301      	movs	r3, #1
 80038de:	4622      	mov	r2, r4
 80038e0:	4649      	mov	r1, r9
 80038e2:	4638      	mov	r0, r7
 80038e4:	47c0      	blx	r8
 80038e6:	3001      	adds	r0, #1
 80038e8:	d0e6      	beq.n	80038b8 <_printf_common+0xa8>
 80038ea:	3601      	adds	r6, #1
 80038ec:	e7d9      	b.n	80038a2 <_printf_common+0x92>
	...

080038f0 <_printf_i>:
 80038f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038f4:	460c      	mov	r4, r1
 80038f6:	7e27      	ldrb	r7, [r4, #24]
 80038f8:	4691      	mov	r9, r2
 80038fa:	2f78      	cmp	r7, #120	; 0x78
 80038fc:	4680      	mov	r8, r0
 80038fe:	469a      	mov	sl, r3
 8003900:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003902:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003906:	d807      	bhi.n	8003918 <_printf_i+0x28>
 8003908:	2f62      	cmp	r7, #98	; 0x62
 800390a:	d80a      	bhi.n	8003922 <_printf_i+0x32>
 800390c:	2f00      	cmp	r7, #0
 800390e:	f000 80d9 	beq.w	8003ac4 <_printf_i+0x1d4>
 8003912:	2f58      	cmp	r7, #88	; 0x58
 8003914:	f000 80a4 	beq.w	8003a60 <_printf_i+0x170>
 8003918:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800391c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003920:	e03a      	b.n	8003998 <_printf_i+0xa8>
 8003922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003926:	2b15      	cmp	r3, #21
 8003928:	d8f6      	bhi.n	8003918 <_printf_i+0x28>
 800392a:	a001      	add	r0, pc, #4	; (adr r0, 8003930 <_printf_i+0x40>)
 800392c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003930:	08003989 	.word	0x08003989
 8003934:	0800399d 	.word	0x0800399d
 8003938:	08003919 	.word	0x08003919
 800393c:	08003919 	.word	0x08003919
 8003940:	08003919 	.word	0x08003919
 8003944:	08003919 	.word	0x08003919
 8003948:	0800399d 	.word	0x0800399d
 800394c:	08003919 	.word	0x08003919
 8003950:	08003919 	.word	0x08003919
 8003954:	08003919 	.word	0x08003919
 8003958:	08003919 	.word	0x08003919
 800395c:	08003aab 	.word	0x08003aab
 8003960:	080039cd 	.word	0x080039cd
 8003964:	08003a8d 	.word	0x08003a8d
 8003968:	08003919 	.word	0x08003919
 800396c:	08003919 	.word	0x08003919
 8003970:	08003acd 	.word	0x08003acd
 8003974:	08003919 	.word	0x08003919
 8003978:	080039cd 	.word	0x080039cd
 800397c:	08003919 	.word	0x08003919
 8003980:	08003919 	.word	0x08003919
 8003984:	08003a95 	.word	0x08003a95
 8003988:	680b      	ldr	r3, [r1, #0]
 800398a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800398e:	1d1a      	adds	r2, r3, #4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	600a      	str	r2, [r1, #0]
 8003994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003998:	2301      	movs	r3, #1
 800399a:	e0a4      	b.n	8003ae6 <_printf_i+0x1f6>
 800399c:	6825      	ldr	r5, [r4, #0]
 800399e:	6808      	ldr	r0, [r1, #0]
 80039a0:	062e      	lsls	r6, r5, #24
 80039a2:	f100 0304 	add.w	r3, r0, #4
 80039a6:	d50a      	bpl.n	80039be <_printf_i+0xce>
 80039a8:	6805      	ldr	r5, [r0, #0]
 80039aa:	600b      	str	r3, [r1, #0]
 80039ac:	2d00      	cmp	r5, #0
 80039ae:	da03      	bge.n	80039b8 <_printf_i+0xc8>
 80039b0:	232d      	movs	r3, #45	; 0x2d
 80039b2:	426d      	negs	r5, r5
 80039b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b8:	230a      	movs	r3, #10
 80039ba:	485e      	ldr	r0, [pc, #376]	; (8003b34 <_printf_i+0x244>)
 80039bc:	e019      	b.n	80039f2 <_printf_i+0x102>
 80039be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039c2:	6805      	ldr	r5, [r0, #0]
 80039c4:	600b      	str	r3, [r1, #0]
 80039c6:	bf18      	it	ne
 80039c8:	b22d      	sxthne	r5, r5
 80039ca:	e7ef      	b.n	80039ac <_printf_i+0xbc>
 80039cc:	680b      	ldr	r3, [r1, #0]
 80039ce:	6825      	ldr	r5, [r4, #0]
 80039d0:	1d18      	adds	r0, r3, #4
 80039d2:	6008      	str	r0, [r1, #0]
 80039d4:	0628      	lsls	r0, r5, #24
 80039d6:	d501      	bpl.n	80039dc <_printf_i+0xec>
 80039d8:	681d      	ldr	r5, [r3, #0]
 80039da:	e002      	b.n	80039e2 <_printf_i+0xf2>
 80039dc:	0669      	lsls	r1, r5, #25
 80039de:	d5fb      	bpl.n	80039d8 <_printf_i+0xe8>
 80039e0:	881d      	ldrh	r5, [r3, #0]
 80039e2:	2f6f      	cmp	r7, #111	; 0x6f
 80039e4:	bf0c      	ite	eq
 80039e6:	2308      	moveq	r3, #8
 80039e8:	230a      	movne	r3, #10
 80039ea:	4852      	ldr	r0, [pc, #328]	; (8003b34 <_printf_i+0x244>)
 80039ec:	2100      	movs	r1, #0
 80039ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039f2:	6866      	ldr	r6, [r4, #4]
 80039f4:	2e00      	cmp	r6, #0
 80039f6:	bfa8      	it	ge
 80039f8:	6821      	ldrge	r1, [r4, #0]
 80039fa:	60a6      	str	r6, [r4, #8]
 80039fc:	bfa4      	itt	ge
 80039fe:	f021 0104 	bicge.w	r1, r1, #4
 8003a02:	6021      	strge	r1, [r4, #0]
 8003a04:	b90d      	cbnz	r5, 8003a0a <_printf_i+0x11a>
 8003a06:	2e00      	cmp	r6, #0
 8003a08:	d04d      	beq.n	8003aa6 <_printf_i+0x1b6>
 8003a0a:	4616      	mov	r6, r2
 8003a0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a10:	fb03 5711 	mls	r7, r3, r1, r5
 8003a14:	5dc7      	ldrb	r7, [r0, r7]
 8003a16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a1a:	462f      	mov	r7, r5
 8003a1c:	42bb      	cmp	r3, r7
 8003a1e:	460d      	mov	r5, r1
 8003a20:	d9f4      	bls.n	8003a0c <_printf_i+0x11c>
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d10b      	bne.n	8003a3e <_printf_i+0x14e>
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	07df      	lsls	r7, r3, #31
 8003a2a:	d508      	bpl.n	8003a3e <_printf_i+0x14e>
 8003a2c:	6923      	ldr	r3, [r4, #16]
 8003a2e:	6861      	ldr	r1, [r4, #4]
 8003a30:	4299      	cmp	r1, r3
 8003a32:	bfde      	ittt	le
 8003a34:	2330      	movle	r3, #48	; 0x30
 8003a36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a3e:	1b92      	subs	r2, r2, r6
 8003a40:	6122      	str	r2, [r4, #16]
 8003a42:	464b      	mov	r3, r9
 8003a44:	4621      	mov	r1, r4
 8003a46:	4640      	mov	r0, r8
 8003a48:	f8cd a000 	str.w	sl, [sp]
 8003a4c:	aa03      	add	r2, sp, #12
 8003a4e:	f7ff fedf 	bl	8003810 <_printf_common>
 8003a52:	3001      	adds	r0, #1
 8003a54:	d14c      	bne.n	8003af0 <_printf_i+0x200>
 8003a56:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5a:	b004      	add	sp, #16
 8003a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a60:	4834      	ldr	r0, [pc, #208]	; (8003b34 <_printf_i+0x244>)
 8003a62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a66:	680e      	ldr	r6, [r1, #0]
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a6e:	061f      	lsls	r7, r3, #24
 8003a70:	600e      	str	r6, [r1, #0]
 8003a72:	d514      	bpl.n	8003a9e <_printf_i+0x1ae>
 8003a74:	07d9      	lsls	r1, r3, #31
 8003a76:	bf44      	itt	mi
 8003a78:	f043 0320 	orrmi.w	r3, r3, #32
 8003a7c:	6023      	strmi	r3, [r4, #0]
 8003a7e:	b91d      	cbnz	r5, 8003a88 <_printf_i+0x198>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	f023 0320 	bic.w	r3, r3, #32
 8003a86:	6023      	str	r3, [r4, #0]
 8003a88:	2310      	movs	r3, #16
 8003a8a:	e7af      	b.n	80039ec <_printf_i+0xfc>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	f043 0320 	orr.w	r3, r3, #32
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	2378      	movs	r3, #120	; 0x78
 8003a96:	4828      	ldr	r0, [pc, #160]	; (8003b38 <_printf_i+0x248>)
 8003a98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a9c:	e7e3      	b.n	8003a66 <_printf_i+0x176>
 8003a9e:	065e      	lsls	r6, r3, #25
 8003aa0:	bf48      	it	mi
 8003aa2:	b2ad      	uxthmi	r5, r5
 8003aa4:	e7e6      	b.n	8003a74 <_printf_i+0x184>
 8003aa6:	4616      	mov	r6, r2
 8003aa8:	e7bb      	b.n	8003a22 <_printf_i+0x132>
 8003aaa:	680b      	ldr	r3, [r1, #0]
 8003aac:	6826      	ldr	r6, [r4, #0]
 8003aae:	1d1d      	adds	r5, r3, #4
 8003ab0:	6960      	ldr	r0, [r4, #20]
 8003ab2:	600d      	str	r5, [r1, #0]
 8003ab4:	0635      	lsls	r5, r6, #24
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	d501      	bpl.n	8003abe <_printf_i+0x1ce>
 8003aba:	6018      	str	r0, [r3, #0]
 8003abc:	e002      	b.n	8003ac4 <_printf_i+0x1d4>
 8003abe:	0671      	lsls	r1, r6, #25
 8003ac0:	d5fb      	bpl.n	8003aba <_printf_i+0x1ca>
 8003ac2:	8018      	strh	r0, [r3, #0]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4616      	mov	r6, r2
 8003ac8:	6123      	str	r3, [r4, #16]
 8003aca:	e7ba      	b.n	8003a42 <_printf_i+0x152>
 8003acc:	680b      	ldr	r3, [r1, #0]
 8003ace:	1d1a      	adds	r2, r3, #4
 8003ad0:	600a      	str	r2, [r1, #0]
 8003ad2:	681e      	ldr	r6, [r3, #0]
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	6862      	ldr	r2, [r4, #4]
 8003ada:	f000 f82f 	bl	8003b3c <memchr>
 8003ade:	b108      	cbz	r0, 8003ae4 <_printf_i+0x1f4>
 8003ae0:	1b80      	subs	r0, r0, r6
 8003ae2:	6060      	str	r0, [r4, #4]
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	6123      	str	r3, [r4, #16]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aee:	e7a8      	b.n	8003a42 <_printf_i+0x152>
 8003af0:	4632      	mov	r2, r6
 8003af2:	4649      	mov	r1, r9
 8003af4:	4640      	mov	r0, r8
 8003af6:	6923      	ldr	r3, [r4, #16]
 8003af8:	47d0      	blx	sl
 8003afa:	3001      	adds	r0, #1
 8003afc:	d0ab      	beq.n	8003a56 <_printf_i+0x166>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	079b      	lsls	r3, r3, #30
 8003b02:	d413      	bmi.n	8003b2c <_printf_i+0x23c>
 8003b04:	68e0      	ldr	r0, [r4, #12]
 8003b06:	9b03      	ldr	r3, [sp, #12]
 8003b08:	4298      	cmp	r0, r3
 8003b0a:	bfb8      	it	lt
 8003b0c:	4618      	movlt	r0, r3
 8003b0e:	e7a4      	b.n	8003a5a <_printf_i+0x16a>
 8003b10:	2301      	movs	r3, #1
 8003b12:	4632      	mov	r2, r6
 8003b14:	4649      	mov	r1, r9
 8003b16:	4640      	mov	r0, r8
 8003b18:	47d0      	blx	sl
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d09b      	beq.n	8003a56 <_printf_i+0x166>
 8003b1e:	3501      	adds	r5, #1
 8003b20:	68e3      	ldr	r3, [r4, #12]
 8003b22:	9903      	ldr	r1, [sp, #12]
 8003b24:	1a5b      	subs	r3, r3, r1
 8003b26:	42ab      	cmp	r3, r5
 8003b28:	dcf2      	bgt.n	8003b10 <_printf_i+0x220>
 8003b2a:	e7eb      	b.n	8003b04 <_printf_i+0x214>
 8003b2c:	2500      	movs	r5, #0
 8003b2e:	f104 0619 	add.w	r6, r4, #25
 8003b32:	e7f5      	b.n	8003b20 <_printf_i+0x230>
 8003b34:	08003de1 	.word	0x08003de1
 8003b38:	08003df2 	.word	0x08003df2

08003b3c <memchr>:
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	b510      	push	{r4, lr}
 8003b40:	b2c9      	uxtb	r1, r1
 8003b42:	4402      	add	r2, r0
 8003b44:	4293      	cmp	r3, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	d101      	bne.n	8003b4e <memchr+0x12>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e003      	b.n	8003b56 <memchr+0x1a>
 8003b4e:	7804      	ldrb	r4, [r0, #0]
 8003b50:	3301      	adds	r3, #1
 8003b52:	428c      	cmp	r4, r1
 8003b54:	d1f6      	bne.n	8003b44 <memchr+0x8>
 8003b56:	bd10      	pop	{r4, pc}

08003b58 <memcpy>:
 8003b58:	440a      	add	r2, r1
 8003b5a:	4291      	cmp	r1, r2
 8003b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b60:	d100      	bne.n	8003b64 <memcpy+0xc>
 8003b62:	4770      	bx	lr
 8003b64:	b510      	push	{r4, lr}
 8003b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b6a:	4291      	cmp	r1, r2
 8003b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b70:	d1f9      	bne.n	8003b66 <memcpy+0xe>
 8003b72:	bd10      	pop	{r4, pc}

08003b74 <memmove>:
 8003b74:	4288      	cmp	r0, r1
 8003b76:	b510      	push	{r4, lr}
 8003b78:	eb01 0402 	add.w	r4, r1, r2
 8003b7c:	d902      	bls.n	8003b84 <memmove+0x10>
 8003b7e:	4284      	cmp	r4, r0
 8003b80:	4623      	mov	r3, r4
 8003b82:	d807      	bhi.n	8003b94 <memmove+0x20>
 8003b84:	1e43      	subs	r3, r0, #1
 8003b86:	42a1      	cmp	r1, r4
 8003b88:	d008      	beq.n	8003b9c <memmove+0x28>
 8003b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b92:	e7f8      	b.n	8003b86 <memmove+0x12>
 8003b94:	4601      	mov	r1, r0
 8003b96:	4402      	add	r2, r0
 8003b98:	428a      	cmp	r2, r1
 8003b9a:	d100      	bne.n	8003b9e <memmove+0x2a>
 8003b9c:	bd10      	pop	{r4, pc}
 8003b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ba6:	e7f7      	b.n	8003b98 <memmove+0x24>

08003ba8 <_free_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4605      	mov	r5, r0
 8003bac:	2900      	cmp	r1, #0
 8003bae:	d043      	beq.n	8003c38 <_free_r+0x90>
 8003bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bb4:	1f0c      	subs	r4, r1, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bfb8      	it	lt
 8003bba:	18e4      	addlt	r4, r4, r3
 8003bbc:	f000 f8d0 	bl	8003d60 <__malloc_lock>
 8003bc0:	4a1e      	ldr	r2, [pc, #120]	; (8003c3c <_free_r+0x94>)
 8003bc2:	6813      	ldr	r3, [r2, #0]
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	b933      	cbnz	r3, 8003bd6 <_free_r+0x2e>
 8003bc8:	6063      	str	r3, [r4, #4]
 8003bca:	6014      	str	r4, [r2, #0]
 8003bcc:	4628      	mov	r0, r5
 8003bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bd2:	f000 b8cb 	b.w	8003d6c <__malloc_unlock>
 8003bd6:	42a3      	cmp	r3, r4
 8003bd8:	d90a      	bls.n	8003bf0 <_free_r+0x48>
 8003bda:	6821      	ldr	r1, [r4, #0]
 8003bdc:	1862      	adds	r2, r4, r1
 8003bde:	4293      	cmp	r3, r2
 8003be0:	bf01      	itttt	eq
 8003be2:	681a      	ldreq	r2, [r3, #0]
 8003be4:	685b      	ldreq	r3, [r3, #4]
 8003be6:	1852      	addeq	r2, r2, r1
 8003be8:	6022      	streq	r2, [r4, #0]
 8003bea:	6063      	str	r3, [r4, #4]
 8003bec:	6004      	str	r4, [r0, #0]
 8003bee:	e7ed      	b.n	8003bcc <_free_r+0x24>
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	b10b      	cbz	r3, 8003bfa <_free_r+0x52>
 8003bf6:	42a3      	cmp	r3, r4
 8003bf8:	d9fa      	bls.n	8003bf0 <_free_r+0x48>
 8003bfa:	6811      	ldr	r1, [r2, #0]
 8003bfc:	1850      	adds	r0, r2, r1
 8003bfe:	42a0      	cmp	r0, r4
 8003c00:	d10b      	bne.n	8003c1a <_free_r+0x72>
 8003c02:	6820      	ldr	r0, [r4, #0]
 8003c04:	4401      	add	r1, r0
 8003c06:	1850      	adds	r0, r2, r1
 8003c08:	4283      	cmp	r3, r0
 8003c0a:	6011      	str	r1, [r2, #0]
 8003c0c:	d1de      	bne.n	8003bcc <_free_r+0x24>
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4401      	add	r1, r0
 8003c14:	6011      	str	r1, [r2, #0]
 8003c16:	6053      	str	r3, [r2, #4]
 8003c18:	e7d8      	b.n	8003bcc <_free_r+0x24>
 8003c1a:	d902      	bls.n	8003c22 <_free_r+0x7a>
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	602b      	str	r3, [r5, #0]
 8003c20:	e7d4      	b.n	8003bcc <_free_r+0x24>
 8003c22:	6820      	ldr	r0, [r4, #0]
 8003c24:	1821      	adds	r1, r4, r0
 8003c26:	428b      	cmp	r3, r1
 8003c28:	bf01      	itttt	eq
 8003c2a:	6819      	ldreq	r1, [r3, #0]
 8003c2c:	685b      	ldreq	r3, [r3, #4]
 8003c2e:	1809      	addeq	r1, r1, r0
 8003c30:	6021      	streq	r1, [r4, #0]
 8003c32:	6063      	str	r3, [r4, #4]
 8003c34:	6054      	str	r4, [r2, #4]
 8003c36:	e7c9      	b.n	8003bcc <_free_r+0x24>
 8003c38:	bd38      	pop	{r3, r4, r5, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000094 	.word	0x20000094

08003c40 <_malloc_r>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	1ccd      	adds	r5, r1, #3
 8003c44:	f025 0503 	bic.w	r5, r5, #3
 8003c48:	3508      	adds	r5, #8
 8003c4a:	2d0c      	cmp	r5, #12
 8003c4c:	bf38      	it	cc
 8003c4e:	250c      	movcc	r5, #12
 8003c50:	2d00      	cmp	r5, #0
 8003c52:	4606      	mov	r6, r0
 8003c54:	db01      	blt.n	8003c5a <_malloc_r+0x1a>
 8003c56:	42a9      	cmp	r1, r5
 8003c58:	d903      	bls.n	8003c62 <_malloc_r+0x22>
 8003c5a:	230c      	movs	r3, #12
 8003c5c:	6033      	str	r3, [r6, #0]
 8003c5e:	2000      	movs	r0, #0
 8003c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c62:	f000 f87d 	bl	8003d60 <__malloc_lock>
 8003c66:	4921      	ldr	r1, [pc, #132]	; (8003cec <_malloc_r+0xac>)
 8003c68:	680a      	ldr	r2, [r1, #0]
 8003c6a:	4614      	mov	r4, r2
 8003c6c:	b99c      	cbnz	r4, 8003c96 <_malloc_r+0x56>
 8003c6e:	4f20      	ldr	r7, [pc, #128]	; (8003cf0 <_malloc_r+0xb0>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b923      	cbnz	r3, 8003c7e <_malloc_r+0x3e>
 8003c74:	4621      	mov	r1, r4
 8003c76:	4630      	mov	r0, r6
 8003c78:	f000 f862 	bl	8003d40 <_sbrk_r>
 8003c7c:	6038      	str	r0, [r7, #0]
 8003c7e:	4629      	mov	r1, r5
 8003c80:	4630      	mov	r0, r6
 8003c82:	f000 f85d 	bl	8003d40 <_sbrk_r>
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	d123      	bne.n	8003cd2 <_malloc_r+0x92>
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	6033      	str	r3, [r6, #0]
 8003c90:	f000 f86c 	bl	8003d6c <__malloc_unlock>
 8003c94:	e7e3      	b.n	8003c5e <_malloc_r+0x1e>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	1b5b      	subs	r3, r3, r5
 8003c9a:	d417      	bmi.n	8003ccc <_malloc_r+0x8c>
 8003c9c:	2b0b      	cmp	r3, #11
 8003c9e:	d903      	bls.n	8003ca8 <_malloc_r+0x68>
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	441c      	add	r4, r3
 8003ca4:	6025      	str	r5, [r4, #0]
 8003ca6:	e004      	b.n	8003cb2 <_malloc_r+0x72>
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	42a2      	cmp	r2, r4
 8003cac:	bf0c      	ite	eq
 8003cae:	600b      	streq	r3, [r1, #0]
 8003cb0:	6053      	strne	r3, [r2, #4]
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f000 f85a 	bl	8003d6c <__malloc_unlock>
 8003cb8:	f104 000b 	add.w	r0, r4, #11
 8003cbc:	1d23      	adds	r3, r4, #4
 8003cbe:	f020 0007 	bic.w	r0, r0, #7
 8003cc2:	1ac2      	subs	r2, r0, r3
 8003cc4:	d0cc      	beq.n	8003c60 <_malloc_r+0x20>
 8003cc6:	1a1b      	subs	r3, r3, r0
 8003cc8:	50a3      	str	r3, [r4, r2]
 8003cca:	e7c9      	b.n	8003c60 <_malloc_r+0x20>
 8003ccc:	4622      	mov	r2, r4
 8003cce:	6864      	ldr	r4, [r4, #4]
 8003cd0:	e7cc      	b.n	8003c6c <_malloc_r+0x2c>
 8003cd2:	1cc4      	adds	r4, r0, #3
 8003cd4:	f024 0403 	bic.w	r4, r4, #3
 8003cd8:	42a0      	cmp	r0, r4
 8003cda:	d0e3      	beq.n	8003ca4 <_malloc_r+0x64>
 8003cdc:	1a21      	subs	r1, r4, r0
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f000 f82e 	bl	8003d40 <_sbrk_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d1dd      	bne.n	8003ca4 <_malloc_r+0x64>
 8003ce8:	e7cf      	b.n	8003c8a <_malloc_r+0x4a>
 8003cea:	bf00      	nop
 8003cec:	20000094 	.word	0x20000094
 8003cf0:	20000098 	.word	0x20000098

08003cf4 <_realloc_r>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	4607      	mov	r7, r0
 8003cf8:	4614      	mov	r4, r2
 8003cfa:	460e      	mov	r6, r1
 8003cfc:	b921      	cbnz	r1, 8003d08 <_realloc_r+0x14>
 8003cfe:	4611      	mov	r1, r2
 8003d00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d04:	f7ff bf9c 	b.w	8003c40 <_malloc_r>
 8003d08:	b922      	cbnz	r2, 8003d14 <_realloc_r+0x20>
 8003d0a:	f7ff ff4d 	bl	8003ba8 <_free_r>
 8003d0e:	4625      	mov	r5, r4
 8003d10:	4628      	mov	r0, r5
 8003d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d14:	f000 f830 	bl	8003d78 <_malloc_usable_size_r>
 8003d18:	42a0      	cmp	r0, r4
 8003d1a:	d20f      	bcs.n	8003d3c <_realloc_r+0x48>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f7ff ff8e 	bl	8003c40 <_malloc_r>
 8003d24:	4605      	mov	r5, r0
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d0f2      	beq.n	8003d10 <_realloc_r+0x1c>
 8003d2a:	4631      	mov	r1, r6
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	f7ff ff13 	bl	8003b58 <memcpy>
 8003d32:	4631      	mov	r1, r6
 8003d34:	4638      	mov	r0, r7
 8003d36:	f7ff ff37 	bl	8003ba8 <_free_r>
 8003d3a:	e7e9      	b.n	8003d10 <_realloc_r+0x1c>
 8003d3c:	4635      	mov	r5, r6
 8003d3e:	e7e7      	b.n	8003d10 <_realloc_r+0x1c>

08003d40 <_sbrk_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	2300      	movs	r3, #0
 8003d44:	4d05      	ldr	r5, [pc, #20]	; (8003d5c <_sbrk_r+0x1c>)
 8003d46:	4604      	mov	r4, r0
 8003d48:	4608      	mov	r0, r1
 8003d4a:	602b      	str	r3, [r5, #0]
 8003d4c:	f7fc ff04 	bl	8000b58 <_sbrk>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d102      	bne.n	8003d5a <_sbrk_r+0x1a>
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	b103      	cbz	r3, 8003d5a <_sbrk_r+0x1a>
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	2000bd64 	.word	0x2000bd64

08003d60 <__malloc_lock>:
 8003d60:	4801      	ldr	r0, [pc, #4]	; (8003d68 <__malloc_lock+0x8>)
 8003d62:	f000 b811 	b.w	8003d88 <__retarget_lock_acquire_recursive>
 8003d66:	bf00      	nop
 8003d68:	2000bd6c 	.word	0x2000bd6c

08003d6c <__malloc_unlock>:
 8003d6c:	4801      	ldr	r0, [pc, #4]	; (8003d74 <__malloc_unlock+0x8>)
 8003d6e:	f000 b80c 	b.w	8003d8a <__retarget_lock_release_recursive>
 8003d72:	bf00      	nop
 8003d74:	2000bd6c 	.word	0x2000bd6c

08003d78 <_malloc_usable_size_r>:
 8003d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d7c:	1f18      	subs	r0, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bfbc      	itt	lt
 8003d82:	580b      	ldrlt	r3, [r1, r0]
 8003d84:	18c0      	addlt	r0, r0, r3
 8003d86:	4770      	bx	lr

08003d88 <__retarget_lock_acquire_recursive>:
 8003d88:	4770      	bx	lr

08003d8a <__retarget_lock_release_recursive>:
 8003d8a:	4770      	bx	lr

08003d8c <_init>:
 8003d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8e:	bf00      	nop
 8003d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d92:	bc08      	pop	{r3}
 8003d94:	469e      	mov	lr, r3
 8003d96:	4770      	bx	lr

08003d98 <_fini>:
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9a:	bf00      	nop
 8003d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9e:	bc08      	pop	{r3}
 8003da0:	469e      	mov	lr, r3
 8003da2:	4770      	bx	lr
